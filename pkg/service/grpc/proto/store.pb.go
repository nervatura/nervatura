// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.14.0
// source: pkg/service/grpc/proto/store.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserGroup int32

const (
	UserGroup_GROUP_USER  UserGroup = 0
	UserGroup_GROUP_ADMIN UserGroup = 1
	UserGroup_GROUP_GUEST UserGroup = 2
)

// Enum value maps for UserGroup.
var (
	UserGroup_name = map[int32]string{
		0: "GROUP_USER",
		1: "GROUP_ADMIN",
		2: "GROUP_GUEST",
	}
	UserGroup_value = map[string]int32{
		"GROUP_USER":  0,
		"GROUP_ADMIN": 1,
		"GROUP_GUEST": 2,
	}
)

func (x UserGroup) Enum() *UserGroup {
	p := new(UserGroup)
	*p = x
	return p
}

func (x UserGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[0].Descriptor()
}

func (UserGroup) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[0]
}

func (x UserGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserGroup.Descriptor instead.
func (UserGroup) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{0}
}

type CustomerType int32

const (
	CustomerType_CUSTOMER_COMPANY CustomerType = 0
	CustomerType_CUSTOMER_PRIVATE CustomerType = 1
	CustomerType_CUSTOMER_OTHER   CustomerType = 2
	CustomerType_CUSTOMER_OWN     CustomerType = 3
)

// Enum value maps for CustomerType.
var (
	CustomerType_name = map[int32]string{
		0: "CUSTOMER_COMPANY",
		1: "CUSTOMER_PRIVATE",
		2: "CUSTOMER_OTHER",
		3: "CUSTOMER_OWN",
	}
	CustomerType_value = map[string]int32{
		"CUSTOMER_COMPANY": 0,
		"CUSTOMER_PRIVATE": 1,
		"CUSTOMER_OTHER":   2,
		"CUSTOMER_OWN":     3,
	}
)

func (x CustomerType) Enum() *CustomerType {
	p := new(CustomerType)
	*p = x
	return p
}

func (x CustomerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[1].Descriptor()
}

func (CustomerType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[1]
}

func (x CustomerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerType.Descriptor instead.
func (CustomerType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{1}
}

type LinkType int32

const (
	LinkType_LINK_CUSTOMER LinkType = 0
	LinkType_LINK_EMPLOYEE LinkType = 1
	LinkType_LINK_ITEM     LinkType = 2
	LinkType_LINK_MOVEMENT LinkType = 3
	LinkType_LINK_PAYMENT  LinkType = 4
	LinkType_LINK_PLACE    LinkType = 5
	LinkType_LINK_PRODUCT  LinkType = 6
	LinkType_LINK_PROJECT  LinkType = 7
	LinkType_LINK_TOOL     LinkType = 8
	LinkType_LINK_TRANS    LinkType = 9
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "LINK_CUSTOMER",
		1: "LINK_EMPLOYEE",
		2: "LINK_ITEM",
		3: "LINK_MOVEMENT",
		4: "LINK_PAYMENT",
		5: "LINK_PLACE",
		6: "LINK_PRODUCT",
		7: "LINK_PROJECT",
		8: "LINK_TOOL",
		9: "LINK_TRANS",
	}
	LinkType_value = map[string]int32{
		"LINK_CUSTOMER": 0,
		"LINK_EMPLOYEE": 1,
		"LINK_ITEM":     2,
		"LINK_MOVEMENT": 3,
		"LINK_PAYMENT":  4,
		"LINK_PLACE":    5,
		"LINK_PRODUCT":  6,
		"LINK_PROJECT":  7,
		"LINK_TOOL":     8,
		"LINK_TRANS":    9,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[2].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[2]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{2}
}

type LogType int32

const (
	LogType_LOG_INSERT LogType = 0
	LogType_LOG_UPDATE LogType = 1
	LogType_LOG_DELETE LogType = 2
)

// Enum value maps for LogType.
var (
	LogType_name = map[int32]string{
		0: "LOG_INSERT",
		1: "LOG_UPDATE",
		2: "LOG_DELETE",
	}
	LogType_value = map[string]int32{
		"LOG_INSERT": 0,
		"LOG_UPDATE": 1,
		"LOG_DELETE": 2,
	}
)

func (x LogType) Enum() *LogType {
	p := new(LogType)
	*p = x
	return p
}

func (x LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[3].Descriptor()
}

func (LogType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[3]
}

func (x LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogType.Descriptor instead.
func (LogType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{3}
}

type MovementType int32

const (
	MovementType_MOVEMENT_INVENTORY MovementType = 0
	MovementType_MOVEMENT_TOOL      MovementType = 1
	MovementType_MOVEMENT_PLAN      MovementType = 2
	MovementType_MOVEMENT_HEAD      MovementType = 3
)

// Enum value maps for MovementType.
var (
	MovementType_name = map[int32]string{
		0: "MOVEMENT_INVENTORY",
		1: "MOVEMENT_TOOL",
		2: "MOVEMENT_PLAN",
		3: "MOVEMENT_HEAD",
	}
	MovementType_value = map[string]int32{
		"MOVEMENT_INVENTORY": 0,
		"MOVEMENT_TOOL":      1,
		"MOVEMENT_PLAN":      2,
		"MOVEMENT_HEAD":      3,
	}
)

func (x MovementType) Enum() *MovementType {
	p := new(MovementType)
	*p = x
	return p
}

func (x MovementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovementType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[4].Descriptor()
}

func (MovementType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[4]
}

func (x MovementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MovementType.Descriptor instead.
func (MovementType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{4}
}

type PlaceType int32

const (
	PlaceType_PLACE_WAREHOUSE PlaceType = 0
	PlaceType_PLACE_BANK      PlaceType = 1
	PlaceType_PLACE_CASH      PlaceType = 2
	PlaceType_PLACE_OTHER     PlaceType = 3
)

// Enum value maps for PlaceType.
var (
	PlaceType_name = map[int32]string{
		0: "PLACE_WAREHOUSE",
		1: "PLACE_BANK",
		2: "PLACE_CASH",
		3: "PLACE_OTHER",
	}
	PlaceType_value = map[string]int32{
		"PLACE_WAREHOUSE": 0,
		"PLACE_BANK":      1,
		"PLACE_CASH":      2,
		"PLACE_OTHER":     3,
	}
)

func (x PlaceType) Enum() *PlaceType {
	p := new(PlaceType)
	*p = x
	return p
}

func (x PlaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[5].Descriptor()
}

func (PlaceType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[5]
}

func (x PlaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceType.Descriptor instead.
func (PlaceType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{5}
}

type PriceType int32

const (
	PriceType_PRICE_CUSTOMER PriceType = 0
	PriceType_PRICE_VENDOR   PriceType = 1
)

// Enum value maps for PriceType.
var (
	PriceType_name = map[int32]string{
		0: "PRICE_CUSTOMER",
		1: "PRICE_VENDOR",
	}
	PriceType_value = map[string]int32{
		"PRICE_CUSTOMER": 0,
		"PRICE_VENDOR":   1,
	}
)

func (x PriceType) Enum() *PriceType {
	p := new(PriceType)
	*p = x
	return p
}

func (x PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[6].Descriptor()
}

func (PriceType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[6]
}

func (x PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceType.Descriptor instead.
func (PriceType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{6}
}

type BarcodeType int32

const (
	BarcodeType_BARCODE_CODE_39  BarcodeType = 0
	BarcodeType_BARCODE_CODE_128 BarcodeType = 1
	BarcodeType_BARCODE_EAN_8    BarcodeType = 2
	BarcodeType_BARCODE_EAN_13   BarcodeType = 3
	BarcodeType_BARCODE_QR_CODE  BarcodeType = 4
)

// Enum value maps for BarcodeType.
var (
	BarcodeType_name = map[int32]string{
		0: "BARCODE_CODE_39",
		1: "BARCODE_CODE_128",
		2: "BARCODE_EAN_8",
		3: "BARCODE_EAN_13",
		4: "BARCODE_QR_CODE",
	}
	BarcodeType_value = map[string]int32{
		"BARCODE_CODE_39":  0,
		"BARCODE_CODE_128": 1,
		"BARCODE_EAN_8":    2,
		"BARCODE_EAN_13":   3,
		"BARCODE_QR_CODE":  4,
	}
)

func (x BarcodeType) Enum() *BarcodeType {
	p := new(BarcodeType)
	*p = x
	return p
}

func (x BarcodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarcodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[7].Descriptor()
}

func (BarcodeType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[7]
}

func (x BarcodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BarcodeType.Descriptor instead.
func (BarcodeType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{7}
}

type ProductType int32

const (
	ProductType_PRODUCT_ITEM    ProductType = 0
	ProductType_PRODUCT_SERVICE ProductType = 1
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_ITEM",
		1: "PRODUCT_SERVICE",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_ITEM":    0,
		"PRODUCT_SERVICE": 1,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[8].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[8]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{8}
}

type RateType int32

const (
	RateType_RATE_RATE    RateType = 0
	RateType_RATE_BUY     RateType = 1
	RateType_RATE_SELL    RateType = 2
	RateType_RATE_AVERAGE RateType = 3
)

// Enum value maps for RateType.
var (
	RateType_name = map[int32]string{
		0: "RATE_RATE",
		1: "RATE_BUY",
		2: "RATE_SELL",
		3: "RATE_AVERAGE",
	}
	RateType_value = map[string]int32{
		"RATE_RATE":    0,
		"RATE_BUY":     1,
		"RATE_SELL":    2,
		"RATE_AVERAGE": 3,
	}
)

func (x RateType) Enum() *RateType {
	p := new(RateType)
	*p = x
	return p
}

func (x RateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[9].Descriptor()
}

func (RateType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[9]
}

func (x RateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateType.Descriptor instead.
func (RateType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{9}
}

type PaidType int32

const (
	PaidType_PAID_ONLINE   PaidType = 0
	PaidType_PAID_CARD     PaidType = 1
	PaidType_PAID_TRANSFER PaidType = 2
	PaidType_PAID_CASH     PaidType = 3
	PaidType_PAID_OTHER    PaidType = 4
)

// Enum value maps for PaidType.
var (
	PaidType_name = map[int32]string{
		0: "PAID_ONLINE",
		1: "PAID_CARD",
		2: "PAID_TRANSFER",
		3: "PAID_CASH",
		4: "PAID_OTHER",
	}
	PaidType_value = map[string]int32{
		"PAID_ONLINE":   0,
		"PAID_CARD":     1,
		"PAID_TRANSFER": 2,
		"PAID_CASH":     3,
		"PAID_OTHER":    4,
	}
)

func (x PaidType) Enum() *PaidType {
	p := new(PaidType)
	*p = x
	return p
}

func (x PaidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaidType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[10].Descriptor()
}

func (PaidType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[10]
}

func (x PaidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaidType.Descriptor instead.
func (PaidType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{10}
}

type TransStatus int32

const (
	TransStatus_TRANS_NORMAL       TransStatus = 0
	TransStatus_TRANS_CANCELLATION TransStatus = 1
	TransStatus_TRANS_AMENDMENT    TransStatus = 2
)

// Enum value maps for TransStatus.
var (
	TransStatus_name = map[int32]string{
		0: "TRANS_NORMAL",
		1: "TRANS_CANCELLATION",
		2: "TRANS_AMENDMENT",
	}
	TransStatus_value = map[string]int32{
		"TRANS_NORMAL":       0,
		"TRANS_CANCELLATION": 1,
		"TRANS_AMENDMENT":    2,
	}
)

func (x TransStatus) Enum() *TransStatus {
	p := new(TransStatus)
	*p = x
	return p
}

func (x TransStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[11].Descriptor()
}

func (TransStatus) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[11]
}

func (x TransStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransStatus.Descriptor instead.
func (TransStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{11}
}

type TransState int32

const (
	TransState_TRANS_OK   TransState = 0
	TransState_TRANS_NEW  TransState = 1
	TransState_TRANS_BACK TransState = 2
)

// Enum value maps for TransState.
var (
	TransState_name = map[int32]string{
		0: "TRANS_OK",
		1: "TRANS_NEW",
		2: "TRANS_BACK",
	}
	TransState_value = map[string]int32{
		"TRANS_OK":   0,
		"TRANS_NEW":  1,
		"TRANS_BACK": 2,
	}
)

func (x TransState) Enum() *TransState {
	p := new(TransState)
	*p = x
	return p
}

func (x TransState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[12].Descriptor()
}

func (TransState) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[12]
}

func (x TransState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransState.Descriptor instead.
func (TransState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{12}
}

type Direction int32

const (
	Direction_DIRECTION_OUT      Direction = 0
	Direction_DIRECTION_IN       Direction = 1
	Direction_DIRECTION_TRANSFER Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "DIRECTION_OUT",
		1: "DIRECTION_IN",
		2: "DIRECTION_TRANSFER",
	}
	Direction_value = map[string]int32{
		"DIRECTION_OUT":      0,
		"DIRECTION_IN":       1,
		"DIRECTION_TRANSFER": 2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[13].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[13]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{13}
}

type TransType int32

const (
	TransType_TRANS_INVOICE    TransType = 0
	TransType_TRANS_RECEIPT    TransType = 1
	TransType_TRANS_ORDER      TransType = 2
	TransType_TRANS_OFFER      TransType = 3
	TransType_TRANS_WORKSHEET  TransType = 4
	TransType_TRANS_RENT       TransType = 5
	TransType_TRANS_DELIVERY   TransType = 6
	TransType_TRANS_INVENTORY  TransType = 7
	TransType_TRANS_WAYBILL    TransType = 8
	TransType_TRANS_PRODUCTION TransType = 9
	TransType_TRANS_FORMULA    TransType = 10
	TransType_TRANS_BANK       TransType = 11
	TransType_TRANS_CASH       TransType = 12
)

// Enum value maps for TransType.
var (
	TransType_name = map[int32]string{
		0:  "TRANS_INVOICE",
		1:  "TRANS_RECEIPT",
		2:  "TRANS_ORDER",
		3:  "TRANS_OFFER",
		4:  "TRANS_WORKSHEET",
		5:  "TRANS_RENT",
		6:  "TRANS_DELIVERY",
		7:  "TRANS_INVENTORY",
		8:  "TRANS_WAYBILL",
		9:  "TRANS_PRODUCTION",
		10: "TRANS_FORMULA",
		11: "TRANS_BANK",
		12: "TRANS_CASH",
	}
	TransType_value = map[string]int32{
		"TRANS_INVOICE":    0,
		"TRANS_RECEIPT":    1,
		"TRANS_ORDER":      2,
		"TRANS_OFFER":      3,
		"TRANS_WORKSHEET":  4,
		"TRANS_RENT":       5,
		"TRANS_DELIVERY":   6,
		"TRANS_INVENTORY":  7,
		"TRANS_WAYBILL":    8,
		"TRANS_PRODUCTION": 9,
		"TRANS_FORMULA":    10,
		"TRANS_BANK":       11,
		"TRANS_CASH":       12,
	}
)

func (x TransType) Enum() *TransType {
	p := new(TransType)
	*p = x
	return p
}

func (x TransType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[14].Descriptor()
}

func (TransType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[14]
}

func (x TransType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransType.Descriptor instead.
func (TransType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{14}
}

type ConfigType int32

const (
	ConfigType_CONFIG_MAP         ConfigType = 0
	ConfigType_CONFIG_SHORTCUT    ConfigType = 1
	ConfigType_CONFIG_MESSAGE     ConfigType = 2
	ConfigType_CONFIG_PATTERN     ConfigType = 3
	ConfigType_CONFIG_REPORT      ConfigType = 4
	ConfigType_CONFIG_PRINT_QUEUE ConfigType = 5
	ConfigType_CONFIG_DATA        ConfigType = 6
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0: "CONFIG_MAP",
		1: "CONFIG_SHORTCUT",
		2: "CONFIG_MESSAGE",
		3: "CONFIG_PATTERN",
		4: "CONFIG_REPORT",
		5: "CONFIG_PRINT_QUEUE",
		6: "CONFIG_DATA",
	}
	ConfigType_value = map[string]int32{
		"CONFIG_MAP":         0,
		"CONFIG_SHORTCUT":    1,
		"CONFIG_MESSAGE":     2,
		"CONFIG_PATTERN":     3,
		"CONFIG_REPORT":      4,
		"CONFIG_PRINT_QUEUE": 5,
		"CONFIG_DATA":        6,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[15].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[15]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{15}
}

type FieldType int32

const (
	FieldType_FIELD_STRING         FieldType = 0
	FieldType_FIELD_BOOL           FieldType = 1
	FieldType_FIELD_INTEGER        FieldType = 2
	FieldType_FIELD_NUMBER         FieldType = 3
	FieldType_FIELD_DATE           FieldType = 4
	FieldType_FIELD_DATETIME       FieldType = 5
	FieldType_FIELD_MEMO           FieldType = 6
	FieldType_FIELD_ENUM           FieldType = 7
	FieldType_FIELD_URL            FieldType = 8
	FieldType_FIELD_CUSTOMER       FieldType = 9
	FieldType_FIELD_EMPLOYEE       FieldType = 10
	FieldType_FIELD_PLACE          FieldType = 11
	FieldType_FIELD_PRODUCT        FieldType = 12
	FieldType_FIELD_PROJECT        FieldType = 13
	FieldType_FIELD_TOOL           FieldType = 14
	FieldType_FIELD_TRANS          FieldType = 15
	FieldType_FIELD_TRANS_ITEM     FieldType = 16
	FieldType_FIELD_TRANS_MOVEMENT FieldType = 17
	FieldType_FIELD_TRANS_PAYMENT  FieldType = 18
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "FIELD_STRING",
		1:  "FIELD_BOOL",
		2:  "FIELD_INTEGER",
		3:  "FIELD_NUMBER",
		4:  "FIELD_DATE",
		5:  "FIELD_DATETIME",
		6:  "FIELD_MEMO",
		7:  "FIELD_ENUM",
		8:  "FIELD_URL",
		9:  "FIELD_CUSTOMER",
		10: "FIELD_EMPLOYEE",
		11: "FIELD_PLACE",
		12: "FIELD_PRODUCT",
		13: "FIELD_PROJECT",
		14: "FIELD_TOOL",
		15: "FIELD_TRANS",
		16: "FIELD_TRANS_ITEM",
		17: "FIELD_TRANS_MOVEMENT",
		18: "FIELD_TRANS_PAYMENT",
	}
	FieldType_value = map[string]int32{
		"FIELD_STRING":         0,
		"FIELD_BOOL":           1,
		"FIELD_INTEGER":        2,
		"FIELD_NUMBER":         3,
		"FIELD_DATE":           4,
		"FIELD_DATETIME":       5,
		"FIELD_MEMO":           6,
		"FIELD_ENUM":           7,
		"FIELD_URL":            8,
		"FIELD_CUSTOMER":       9,
		"FIELD_EMPLOYEE":       10,
		"FIELD_PLACE":          11,
		"FIELD_PRODUCT":        12,
		"FIELD_PROJECT":        13,
		"FIELD_TOOL":           14,
		"FIELD_TRANS":          15,
		"FIELD_TRANS_ITEM":     16,
		"FIELD_TRANS_MOVEMENT": 17,
		"FIELD_TRANS_PAYMENT":  18,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[16].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[16]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{16}
}

type MapFilter int32

const (
	MapFilter_FILTER_ADDRESS    MapFilter = 0
	MapFilter_FILTER_BARCODE    MapFilter = 1
	MapFilter_FILTER_CONTACT    MapFilter = 2
	MapFilter_FILTER_CURRENCY   MapFilter = 3
	MapFilter_FILTER_CUSTOMER   MapFilter = 4
	MapFilter_FILTER_EMPLOYEE   MapFilter = 5
	MapFilter_FILTER_EVENT      MapFilter = 6
	MapFilter_FILTER_ITEM       MapFilter = 7
	MapFilter_FILTER_MOVEMENT   MapFilter = 8
	MapFilter_FILTER_PAYMENT    MapFilter = 9
	MapFilter_FILTER_PLACE      MapFilter = 10
	MapFilter_FILTER_PRICE      MapFilter = 11
	MapFilter_FILTER_PRODUCT    MapFilter = 12
	MapFilter_FILTER_PROJECT    MapFilter = 13
	MapFilter_FILTER_RATE       MapFilter = 14
	MapFilter_FILTER_TAX        MapFilter = 15
	MapFilter_FILTER_TOOL       MapFilter = 16
	MapFilter_FILTER_USER       MapFilter = 17
	MapFilter_FILTER_TRANS      MapFilter = 18
	MapFilter_FILTER_INVOICE    MapFilter = 19
	MapFilter_FILTER_RECEIPT    MapFilter = 20
	MapFilter_FILTER_ORDER      MapFilter = 21
	MapFilter_FILTER_OFFER      MapFilter = 22
	MapFilter_FILTER_WORKSHEET  MapFilter = 23
	MapFilter_FILTER_RENT       MapFilter = 24
	MapFilter_FILTER_DELIVERY   MapFilter = 25
	MapFilter_FILTER_INVENTORY  MapFilter = 26
	MapFilter_FILTER_WAYBILL    MapFilter = 27
	MapFilter_FILTER_PRODUCTION MapFilter = 28
	MapFilter_FILTER_FORMULA    MapFilter = 29
	MapFilter_FILTER_BANK       MapFilter = 30
	MapFilter_FILTER_CASH       MapFilter = 31
)

// Enum value maps for MapFilter.
var (
	MapFilter_name = map[int32]string{
		0:  "FILTER_ADDRESS",
		1:  "FILTER_BARCODE",
		2:  "FILTER_CONTACT",
		3:  "FILTER_CURRENCY",
		4:  "FILTER_CUSTOMER",
		5:  "FILTER_EMPLOYEE",
		6:  "FILTER_EVENT",
		7:  "FILTER_ITEM",
		8:  "FILTER_MOVEMENT",
		9:  "FILTER_PAYMENT",
		10: "FILTER_PLACE",
		11: "FILTER_PRICE",
		12: "FILTER_PRODUCT",
		13: "FILTER_PROJECT",
		14: "FILTER_RATE",
		15: "FILTER_TAX",
		16: "FILTER_TOOL",
		17: "FILTER_USER",
		18: "FILTER_TRANS",
		19: "FILTER_INVOICE",
		20: "FILTER_RECEIPT",
		21: "FILTER_ORDER",
		22: "FILTER_OFFER",
		23: "FILTER_WORKSHEET",
		24: "FILTER_RENT",
		25: "FILTER_DELIVERY",
		26: "FILTER_INVENTORY",
		27: "FILTER_WAYBILL",
		28: "FILTER_PRODUCTION",
		29: "FILTER_FORMULA",
		30: "FILTER_BANK",
		31: "FILTER_CASH",
	}
	MapFilter_value = map[string]int32{
		"FILTER_ADDRESS":    0,
		"FILTER_BARCODE":    1,
		"FILTER_CONTACT":    2,
		"FILTER_CURRENCY":   3,
		"FILTER_CUSTOMER":   4,
		"FILTER_EMPLOYEE":   5,
		"FILTER_EVENT":      6,
		"FILTER_ITEM":       7,
		"FILTER_MOVEMENT":   8,
		"FILTER_PAYMENT":    9,
		"FILTER_PLACE":      10,
		"FILTER_PRICE":      11,
		"FILTER_PRODUCT":    12,
		"FILTER_PROJECT":    13,
		"FILTER_RATE":       14,
		"FILTER_TAX":        15,
		"FILTER_TOOL":       16,
		"FILTER_USER":       17,
		"FILTER_TRANS":      18,
		"FILTER_INVOICE":    19,
		"FILTER_RECEIPT":    20,
		"FILTER_ORDER":      21,
		"FILTER_OFFER":      22,
		"FILTER_WORKSHEET":  23,
		"FILTER_RENT":       24,
		"FILTER_DELIVERY":   25,
		"FILTER_INVENTORY":  26,
		"FILTER_WAYBILL":    27,
		"FILTER_PRODUCTION": 28,
		"FILTER_FORMULA":    29,
		"FILTER_BANK":       30,
		"FILTER_CASH":       31,
	}
)

func (x MapFilter) Enum() *MapFilter {
	p := new(MapFilter)
	*p = x
	return p
}

func (x MapFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[17].Descriptor()
}

func (MapFilter) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[17]
}

func (x MapFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapFilter.Descriptor instead.
func (MapFilter) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{17}
}

type ShortcutMethod int32

const (
	ShortcutMethod_METHOD_GET  ShortcutMethod = 0
	ShortcutMethod_METHOD_POST ShortcutMethod = 1
)

// Enum value maps for ShortcutMethod.
var (
	ShortcutMethod_name = map[int32]string{
		0: "METHOD_GET",
		1: "METHOD_POST",
	}
	ShortcutMethod_value = map[string]int32{
		"METHOD_GET":  0,
		"METHOD_POST": 1,
	}
)

func (x ShortcutMethod) Enum() *ShortcutMethod {
	p := new(ShortcutMethod)
	*p = x
	return p
}

func (x ShortcutMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortcutMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[18].Descriptor()
}

func (ShortcutMethod) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[18]
}

func (x ShortcutMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortcutMethod.Descriptor instead.
func (ShortcutMethod) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{18}
}

type ShortcutField int32

const (
	ShortcutField_SHORTCUT_STRING  ShortcutField = 0
	ShortcutField_SHORTCUT_BOOL    ShortcutField = 1
	ShortcutField_SHORTCUT_INTEGER ShortcutField = 2
	ShortcutField_SHORTCUT_NUMBER  ShortcutField = 3
	ShortcutField_SHORTCUT_DATE    ShortcutField = 4
)

// Enum value maps for ShortcutField.
var (
	ShortcutField_name = map[int32]string{
		0: "SHORTCUT_STRING",
		1: "SHORTCUT_BOOL",
		2: "SHORTCUT_INTEGER",
		3: "SHORTCUT_NUMBER",
		4: "SHORTCUT_DATE",
	}
	ShortcutField_value = map[string]int32{
		"SHORTCUT_STRING":  0,
		"SHORTCUT_BOOL":    1,
		"SHORTCUT_INTEGER": 2,
		"SHORTCUT_NUMBER":  3,
		"SHORTCUT_DATE":    4,
	}
)

func (x ShortcutField) Enum() *ShortcutField {
	p := new(ShortcutField)
	*p = x
	return p
}

func (x ShortcutField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShortcutField) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[19].Descriptor()
}

func (ShortcutField) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[19]
}

func (x ShortcutField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShortcutField.Descriptor instead.
func (ShortcutField) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{19}
}

type FileType int32

const (
	FileType_FILE_PDF FileType = 0
	FileType_FILE_CSV FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE_PDF",
		1: "FILE_CSV",
	}
	FileType_value = map[string]int32{
		"FILE_PDF": 0,
		"FILE_CSV": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[20].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[20]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{20}
}

type Model int32

const (
	Model_AUTH     Model = 0
	Model_CONFIG   Model = 1
	Model_CURRENCY Model = 2
	Model_CUSTOMER Model = 3
	Model_EMPLOYEE Model = 4
	Model_ITEM     Model = 5
	Model_LINK     Model = 6
	Model_MOVEMENT Model = 7
	Model_PAYMENT  Model = 8
	Model_PLACE    Model = 9
	Model_PRICE    Model = 10
	Model_PRODUCT  Model = 11
	Model_PROJECT  Model = 12
	Model_RATE     Model = 13
	Model_TAX      Model = 14
	Model_TOOL     Model = 15
	Model_TRANS    Model = 16
)

// Enum value maps for Model.
var (
	Model_name = map[int32]string{
		0:  "AUTH",
		1:  "CONFIG",
		2:  "CURRENCY",
		3:  "CUSTOMER",
		4:  "EMPLOYEE",
		5:  "ITEM",
		6:  "LINK",
		7:  "MOVEMENT",
		8:  "PAYMENT",
		9:  "PLACE",
		10: "PRICE",
		11: "PRODUCT",
		12: "PROJECT",
		13: "RATE",
		14: "TAX",
		15: "TOOL",
		16: "TRANS",
	}
	Model_value = map[string]int32{
		"AUTH":     0,
		"CONFIG":   1,
		"CURRENCY": 2,
		"CUSTOMER": 3,
		"EMPLOYEE": 4,
		"ITEM":     5,
		"LINK":     6,
		"MOVEMENT": 7,
		"PAYMENT":  8,
		"PLACE":    9,
		"PRICE":    10,
		"PRODUCT":  11,
		"PROJECT":  12,
		"RATE":     13,
		"TAX":      14,
		"TOOL":     15,
		"TRANS":    16,
	}
)

func (x Model) Enum() *Model {
	p := new(Model)
	*p = x
	return p
}

func (x Model) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[21].Descriptor()
}

func (Model) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[21]
}

func (x Model) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model.Descriptor instead.
func (Model) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{21}
}

type ViewName int32

const (
	ViewName_VIEW_CONFIG_DATA        ViewName = 0
	ViewName_VIEW_CONFIG_MAP         ViewName = 1
	ViewName_VIEW_CONFIG_MESSAGE     ViewName = 2
	ViewName_VIEW_CONFIG_PATTERN     ViewName = 3
	ViewName_VIEW_CONFIG_PRINT_QUEUE ViewName = 4
	ViewName_VIEW_CONFIG_REPORT      ViewName = 5
	ViewName_VIEW_CONFIG_SHORTCUT    ViewName = 6
	ViewName_VIEW_CURRENCY_MAP       ViewName = 7
	ViewName_VIEW_CURRENCY_TAGS      ViewName = 8
	ViewName_VIEW_CURRENCY_VIEW      ViewName = 9
	ViewName_VIEW_CUSTOMER_ADDRESSES ViewName = 10
	ViewName_VIEW_CUSTOMER_CONTACTS  ViewName = 11
	ViewName_VIEW_CUSTOMER_EVENTS    ViewName = 12
	ViewName_VIEW_CUSTOMER_MAP       ViewName = 13
	ViewName_VIEW_CUSTOMER_TAGS      ViewName = 14
	ViewName_VIEW_CUSTOMER_VIEW      ViewName = 15
	ViewName_VIEW_EMPLOYEE_EVENTS    ViewName = 16
	ViewName_VIEW_EMPLOYEE_MAP       ViewName = 17
	ViewName_VIEW_EMPLOYEE_TAGS      ViewName = 18
	ViewName_VIEW_EMPLOYEE_VIEW      ViewName = 19
	ViewName_VIEW_ITEM_MAP           ViewName = 20
	ViewName_VIEW_ITEM_TAGS          ViewName = 21
	ViewName_VIEW_ITEM_VIEW          ViewName = 22
	ViewName_VIEW_LINK_MAP           ViewName = 23
	ViewName_VIEW_LINK_TAGS          ViewName = 24
	ViewName_VIEW_LINK_VIEW          ViewName = 25
	ViewName_VIEW_MOVEMENT_MAP       ViewName = 26
	ViewName_VIEW_MOVEMENT_TAGS      ViewName = 27
	ViewName_VIEW_MOVEMENT_STOCK     ViewName = 28
	ViewName_VIEW_MOVEMENT_INVENTORY ViewName = 29
	ViewName_VIEW_MOVEMENT_WAYBILL   ViewName = 30
	ViewName_VIEW_MOVEMENT_FORMULA   ViewName = 31
	ViewName_VIEW_MOVEMENT_VIEW      ViewName = 32
	ViewName_VIEW_PAYMENT_MAP        ViewName = 33
	ViewName_VIEW_PAYMENT_INVOICE    ViewName = 34
	ViewName_VIEW_PAYMENT_TAGS       ViewName = 35
	ViewName_VIEW_PAYMENT_VIEW       ViewName = 36
	ViewName_VIEW_PLACE_MAP          ViewName = 37
	ViewName_VIEW_PLACE_TAGS         ViewName = 38
	ViewName_VIEW_PLACE_VIEW         ViewName = 39
	ViewName_VIEW_PRICE_MAP          ViewName = 40
	ViewName_VIEW_PRICE_TAGS         ViewName = 41
	ViewName_VIEW_PRICE_VIEW         ViewName = 42
	ViewName_VIEW_PRODUCT_MAP        ViewName = 43
	ViewName_VIEW_PRODUCT_TAGS       ViewName = 44
	ViewName_VIEW_PRODUCT_VIEW       ViewName = 45
	ViewName_VIEW_PROJECT_MAP        ViewName = 46
	ViewName_VIEW_PROJECT_TAGS       ViewName = 47
	ViewName_VIEW_PROJECT_VIEW       ViewName = 48
	ViewName_VIEW_RATE_MAP           ViewName = 49
	ViewName_VIEW_RATE_TAGS          ViewName = 50
	ViewName_VIEW_RATE_VIEW          ViewName = 51
	ViewName_VIEW_TAX_MAP            ViewName = 52
	ViewName_VIEW_TAX_TAGS           ViewName = 53
	ViewName_VIEW_TAX_VIEW           ViewName = 54
	ViewName_VIEW_TOOL_MAP           ViewName = 55
	ViewName_VIEW_TOOL_TAGS          ViewName = 56
	ViewName_VIEW_TOOL_VIEW          ViewName = 57
	ViewName_VIEW_TRANS_MAP          ViewName = 58
	ViewName_VIEW_TRANS_TAGS         ViewName = 59
	ViewName_VIEW_TRANS_VIEW         ViewName = 60
)

// Enum value maps for ViewName.
var (
	ViewName_name = map[int32]string{
		0:  "VIEW_CONFIG_DATA",
		1:  "VIEW_CONFIG_MAP",
		2:  "VIEW_CONFIG_MESSAGE",
		3:  "VIEW_CONFIG_PATTERN",
		4:  "VIEW_CONFIG_PRINT_QUEUE",
		5:  "VIEW_CONFIG_REPORT",
		6:  "VIEW_CONFIG_SHORTCUT",
		7:  "VIEW_CURRENCY_MAP",
		8:  "VIEW_CURRENCY_TAGS",
		9:  "VIEW_CURRENCY_VIEW",
		10: "VIEW_CUSTOMER_ADDRESSES",
		11: "VIEW_CUSTOMER_CONTACTS",
		12: "VIEW_CUSTOMER_EVENTS",
		13: "VIEW_CUSTOMER_MAP",
		14: "VIEW_CUSTOMER_TAGS",
		15: "VIEW_CUSTOMER_VIEW",
		16: "VIEW_EMPLOYEE_EVENTS",
		17: "VIEW_EMPLOYEE_MAP",
		18: "VIEW_EMPLOYEE_TAGS",
		19: "VIEW_EMPLOYEE_VIEW",
		20: "VIEW_ITEM_MAP",
		21: "VIEW_ITEM_TAGS",
		22: "VIEW_ITEM_VIEW",
		23: "VIEW_LINK_MAP",
		24: "VIEW_LINK_TAGS",
		25: "VIEW_LINK_VIEW",
		26: "VIEW_MOVEMENT_MAP",
		27: "VIEW_MOVEMENT_TAGS",
		28: "VIEW_MOVEMENT_STOCK",
		29: "VIEW_MOVEMENT_INVENTORY",
		30: "VIEW_MOVEMENT_WAYBILL",
		31: "VIEW_MOVEMENT_FORMULA",
		32: "VIEW_MOVEMENT_VIEW",
		33: "VIEW_PAYMENT_MAP",
		34: "VIEW_PAYMENT_INVOICE",
		35: "VIEW_PAYMENT_TAGS",
		36: "VIEW_PAYMENT_VIEW",
		37: "VIEW_PLACE_MAP",
		38: "VIEW_PLACE_TAGS",
		39: "VIEW_PLACE_VIEW",
		40: "VIEW_PRICE_MAP",
		41: "VIEW_PRICE_TAGS",
		42: "VIEW_PRICE_VIEW",
		43: "VIEW_PRODUCT_MAP",
		44: "VIEW_PRODUCT_TAGS",
		45: "VIEW_PRODUCT_VIEW",
		46: "VIEW_PROJECT_MAP",
		47: "VIEW_PROJECT_TAGS",
		48: "VIEW_PROJECT_VIEW",
		49: "VIEW_RATE_MAP",
		50: "VIEW_RATE_TAGS",
		51: "VIEW_RATE_VIEW",
		52: "VIEW_TAX_MAP",
		53: "VIEW_TAX_TAGS",
		54: "VIEW_TAX_VIEW",
		55: "VIEW_TOOL_MAP",
		56: "VIEW_TOOL_TAGS",
		57: "VIEW_TOOL_VIEW",
		58: "VIEW_TRANS_MAP",
		59: "VIEW_TRANS_TAGS",
		60: "VIEW_TRANS_VIEW",
	}
	ViewName_value = map[string]int32{
		"VIEW_CONFIG_DATA":        0,
		"VIEW_CONFIG_MAP":         1,
		"VIEW_CONFIG_MESSAGE":     2,
		"VIEW_CONFIG_PATTERN":     3,
		"VIEW_CONFIG_PRINT_QUEUE": 4,
		"VIEW_CONFIG_REPORT":      5,
		"VIEW_CONFIG_SHORTCUT":    6,
		"VIEW_CURRENCY_MAP":       7,
		"VIEW_CURRENCY_TAGS":      8,
		"VIEW_CURRENCY_VIEW":      9,
		"VIEW_CUSTOMER_ADDRESSES": 10,
		"VIEW_CUSTOMER_CONTACTS":  11,
		"VIEW_CUSTOMER_EVENTS":    12,
		"VIEW_CUSTOMER_MAP":       13,
		"VIEW_CUSTOMER_TAGS":      14,
		"VIEW_CUSTOMER_VIEW":      15,
		"VIEW_EMPLOYEE_EVENTS":    16,
		"VIEW_EMPLOYEE_MAP":       17,
		"VIEW_EMPLOYEE_TAGS":      18,
		"VIEW_EMPLOYEE_VIEW":      19,
		"VIEW_ITEM_MAP":           20,
		"VIEW_ITEM_TAGS":          21,
		"VIEW_ITEM_VIEW":          22,
		"VIEW_LINK_MAP":           23,
		"VIEW_LINK_TAGS":          24,
		"VIEW_LINK_VIEW":          25,
		"VIEW_MOVEMENT_MAP":       26,
		"VIEW_MOVEMENT_TAGS":      27,
		"VIEW_MOVEMENT_STOCK":     28,
		"VIEW_MOVEMENT_INVENTORY": 29,
		"VIEW_MOVEMENT_WAYBILL":   30,
		"VIEW_MOVEMENT_FORMULA":   31,
		"VIEW_MOVEMENT_VIEW":      32,
		"VIEW_PAYMENT_MAP":        33,
		"VIEW_PAYMENT_INVOICE":    34,
		"VIEW_PAYMENT_TAGS":       35,
		"VIEW_PAYMENT_VIEW":       36,
		"VIEW_PLACE_MAP":          37,
		"VIEW_PLACE_TAGS":         38,
		"VIEW_PLACE_VIEW":         39,
		"VIEW_PRICE_MAP":          40,
		"VIEW_PRICE_TAGS":         41,
		"VIEW_PRICE_VIEW":         42,
		"VIEW_PRODUCT_MAP":        43,
		"VIEW_PRODUCT_TAGS":       44,
		"VIEW_PRODUCT_VIEW":       45,
		"VIEW_PROJECT_MAP":        46,
		"VIEW_PROJECT_TAGS":       47,
		"VIEW_PROJECT_VIEW":       48,
		"VIEW_RATE_MAP":           49,
		"VIEW_RATE_TAGS":          50,
		"VIEW_RATE_VIEW":          51,
		"VIEW_TAX_MAP":            52,
		"VIEW_TAX_TAGS":           53,
		"VIEW_TAX_VIEW":           54,
		"VIEW_TOOL_MAP":           55,
		"VIEW_TOOL_TAGS":          56,
		"VIEW_TOOL_VIEW":          57,
		"VIEW_TRANS_MAP":          58,
		"VIEW_TRANS_TAGS":         59,
		"VIEW_TRANS_VIEW":         60,
	}
)

func (x ViewName) Enum() *ViewName {
	p := new(ViewName)
	*p = x
	return p
}

func (x ViewName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewName) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[22].Descriptor()
}

func (ViewName) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[22]
}

func (x ViewName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewName.Descriptor instead.
func (ViewName) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{22}
}

type BookmarkType int32

const (
	BookmarkType_BOOKMARK_BROWSER BookmarkType = 0
	BookmarkType_BOOKMARK_EDITOR  BookmarkType = 1
)

// Enum value maps for BookmarkType.
var (
	BookmarkType_name = map[int32]string{
		0: "BOOKMARK_BROWSER",
		1: "BOOKMARK_EDITOR",
	}
	BookmarkType_value = map[string]int32{
		"BOOKMARK_BROWSER": 0,
		"BOOKMARK_EDITOR":  1,
	}
)

func (x BookmarkType) Enum() *BookmarkType {
	p := new(BookmarkType)
	*p = x
	return p
}

func (x BookmarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookmarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_service_grpc_proto_store_proto_enumTypes[23].Descriptor()
}

func (BookmarkType) Type() protoreflect.EnumType {
	return &file_pkg_service_grpc_proto_store_proto_enumTypes[23]
}

func (x BookmarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookmarkType.Descriptor instead.
func (BookmarkType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{23}
}

// No request parameters
type RequestEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestEmpty) Reset() {
	*x = RequestEmpty{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEmpty) ProtoMessage() {}

func (x *RequestEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEmpty.ProtoReflect.Descriptor instead.
func (*RequestEmpty) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{0}
}

// Does not return content.
type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RequestAuthLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *RequestAuthLogin) Reset() {
	*x = RequestAuthLogin{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestAuthLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAuthLogin) ProtoMessage() {}

func (x *RequestAuthLogin) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAuthLogin.ProtoReflect.Descriptor instead.
func (*RequestAuthLogin) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{2}
}

func (x *RequestAuthLogin) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RequestAuthLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestAuthLogin) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type ResponseAuthLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ResponseAuthLogin) Reset() {
	*x = ResponseAuthLogin{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseAuthLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAuthLogin) ProtoMessage() {}

func (x *ResponseAuthLogin) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAuthLogin.ProtoReflect.Descriptor instead.
func (*ResponseAuthLogin) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseAuthLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ResponseAuthLogin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type RequestPasswordChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Confirm  string `protobuf:"bytes,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (x *RequestPasswordChange) Reset() {
	*x = RequestPasswordChange{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestPasswordChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPasswordChange) ProtoMessage() {}

func (x *RequestPasswordChange) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPasswordChange.ProtoReflect.Descriptor instead.
func (*RequestPasswordChange) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{4}
}

func (x *RequestPasswordChange) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestPasswordChange) GetConfirm() string {
	if x != nil {
		return x.Confirm
	}
	return ""
}

type RequestTokenDecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestTokenDecode) Reset() {
	*x = RequestTokenDecode{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestTokenDecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTokenDecode) ProtoMessage() {}

func (x *RequestTokenDecode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTokenDecode.ProtoReflect.Descriptor instead.
func (*RequestTokenDecode) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{5}
}

func (x *RequestTokenDecode) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ResponseTokenDecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// JWT expiration time
	Exp string `protobuf:"bytes,4,opt,name=exp,proto3" json:"exp,omitempty"`
	// JWT issuer
	Iss string `protobuf:"bytes,5,opt,name=iss,proto3" json:"iss,omitempty"`
}

func (x *ResponseTokenDecode) Reset() {
	*x = ResponseTokenDecode{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseTokenDecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTokenDecode) ProtoMessage() {}

func (x *ResponseTokenDecode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTokenDecode.ProtoReflect.Descriptor instead.
func (*ResponseTokenDecode) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseTokenDecode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ResponseTokenDecode) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ResponseTokenDecode) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ResponseTokenDecode) GetExp() string {
	if x != nil {
		return x.Exp
	}
	return ""
}

func (x *ResponseTokenDecode) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

type RequestGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key. If specified, the code does not need to be set.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If specified, the id does not need to be set.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RequestGet) Reset() {
	*x = RequestGet{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGet) ProtoMessage() {}

func (x *RequestGet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGet.ProtoReflect.Descriptor instead.
func (*RequestGet) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{7}
}

func (x *RequestGet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequestGet) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type RequestDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key. If specified, the code does not need to be set.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If specified, the id does not need to be set.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Model name
	Model Model `protobuf:"varint,3,opt,name=model,proto3,enum=nervatura.Model" json:"model,omitempty"`
}

func (x *RequestDelete) Reset() {
	*x = RequestDelete{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDelete) ProtoMessage() {}

func (x *RequestDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDelete.ProtoReflect.Descriptor instead.
func (*RequestDelete) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{8}
}

func (x *RequestDelete) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequestDelete) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RequestDelete) GetModel() Model {
	if x != nil {
		return x.Model
	}
	return Model_AUTH
}

type RequestQueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RequestQueryFilter) Reset() {
	*x = RequestQueryFilter{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestQueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryFilter) ProtoMessage() {}

func (x *RequestQueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryFilter.ProtoReflect.Descriptor instead.
func (*RequestQueryFilter) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{9}
}

func (x *RequestQueryFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RequestQueryFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RequestQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*RequestQueryFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit   int64                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RequestQuery) Reset() {
	*x = RequestQuery{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuery) ProtoMessage() {}

func (x *RequestQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuery.ProtoReflect.Descriptor instead.
func (*RequestQuery) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{10}
}

func (x *RequestQuery) GetFilters() []*RequestQueryFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RequestQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestQuery) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RequestFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server function name.
	// Valid function names: report_install, report_list, report_get, product_price, email_send
	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// Function arguments
	Args map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestFunction) Reset() {
	*x = RequestFunction{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFunction) ProtoMessage() {}

func (x *RequestFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFunction.ProtoReflect.Descriptor instead.
func (*RequestFunction) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{11}
}

func (x *RequestFunction) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *RequestFunction) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RequestView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Predefined view name
	Name ViewName `protobuf:"varint,1,opt,name=name,proto3,enum=nervatura.ViewName" json:"name,omitempty"`
	// Valid SQL WHERE clause
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Valid SQL ORDER BY clause
	OrderBy []string `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Limit the number of records
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip the first N records
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RequestView) Reset() {
	*x = RequestView{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestView) ProtoMessage() {}

func (x *RequestView) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestView.ProtoReflect.Descriptor instead.
func (*RequestView) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{12}
}

func (x *RequestView) GetName() ViewName {
	if x != nil {
		return x.Name
	}
	return ViewName_VIEW_CONFIG_DATA
}

func (x *RequestView) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *RequestView) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *RequestView) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestView) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RequestDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database alias name
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Create demo data
	Demo bool `protobuf:"varint,2,opt,name=demo,proto3" json:"demo,omitempty"`
}

func (x *RequestDatabase) Reset() {
	*x = RequestDatabase{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDatabase) ProtoMessage() {}

func (x *RequestDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDatabase.ProtoReflect.Descriptor instead.
func (*RequestDatabase) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{13}
}

func (x *RequestDatabase) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RequestDatabase) GetDemo() bool {
	if x != nil {
		return x.Demo
	}
	return false
}

type JsonString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Build in convertion of number, boolean, array and object types to string
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JsonString) Reset() {
	*x = JsonString{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonString) ProtoMessage() {}

func (x *JsonString) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonString.ProtoReflect.Descriptor instead.
func (*JsonString) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{14}
}

func (x *JsonString) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type JsonBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON data as bytes
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JsonBytes) Reset() {
	*x = JsonBytes{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonBytes) ProtoMessage() {}

func (x *JsonBytes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonBytes.ProtoReflect.Descriptor instead.
func (*JsonBytes) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{15}
}

func (x *JsonBytes) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Address message
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	State   string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode string `protobuf:"bytes,3,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	City    string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street  string `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	Notes   string `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
	// Additional tags for the address
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	AddressMap *JsonString `protobuf:"bytes,8,opt,name=address_map,json=addressMap,proto3" json:"address_map,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{16}
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Address) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Address) GetAddressMap() *JsonString {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

// Contact message
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Surname   string `protobuf:"bytes,2,opt,name=surname,proto3" json:"surname,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Phone     string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Mobile    string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Notes     string `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	// Additional tags for the contact
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	ContactMap *JsonString `protobuf:"bytes,9,opt,name=contact_map,json=contactMap,proto3" json:"contact_map,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{17}
}

func (x *Contact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Contact) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *Contact) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Contact) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Contact) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Contact) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Contact) GetContactMap() *JsonString {
	if x != nil {
		return x.ContactMap
	}
	return nil
}

// Event message
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// ISO 8601 date-time
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// ISO 8601 date-time
	EndTime     string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Place       string `protobuf:"bytes,5,opt,name=place,proto3" json:"place,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Additional tags for the event
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	EventMap *JsonString `protobuf:"bytes,8,opt,name=event_map,json=eventMap,proto3" json:"event_map,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{18}
}

func (x *Event) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Event) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Event) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Event) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Event) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Event) GetEventMap() *JsonString {
	if x != nil {
		return x.EventMap
	}
	return nil
}

// AuthMeta Bookmark message
type Bookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ENUM field. Valid values: BROWSER, EDITOR
	BookmarkType BookmarkType `protobuf:"varint,1,opt,name=bookmark_type,json=bookmarkType,proto3,enum=nervatura.BookmarkType" json:"bookmark_type,omitempty"`
	// Label of the bookmark
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Editor model or browser view name
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Model code
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Browser filters
	Filters *JsonString `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	// Browser visible columns
	Columns map[string]bool `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,7,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Bookmark) Reset() {
	*x = Bookmark{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookmark) ProtoMessage() {}

func (x *Bookmark) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookmark.ProtoReflect.Descriptor instead.
func (*Bookmark) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{19}
}

func (x *Bookmark) GetBookmarkType() BookmarkType {
	if x != nil {
		return x.BookmarkType
	}
	return BookmarkType_BOOKMARK_BROWSER
}

func (x *Bookmark) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Bookmark) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Bookmark) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Bookmark) GetFilters() *JsonString {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Bookmark) GetColumns() map[string]bool {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Bookmark) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

// AuthMeta message
type AuthMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional tags for the user
	Tags      []string    `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Bookmarks []*Bookmark `protobuf:"bytes,2,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *AuthMeta) Reset() {
	*x = AuthMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMeta) ProtoMessage() {}

func (x *AuthMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMeta.ProtoReflect.Descriptor instead.
func (*AuthMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{20}
}

func (x *AuthMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AuthMeta) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// Auth message
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: USR1731101982N123 ("USR" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Friendly username, nickname or email for login.
	// It can be changed, but it is a unique identifier at the database level.
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field. Default value: GROUP_USER
	UserGroup UserGroup `protobuf:"varint,4,opt,name=user_group,json=userGroup,proto3,enum=nervatura.UserGroup" json:"user_group,omitempty"`
	Disabled  bool      `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	AuthMeta  *AuthMeta `protobuf:"bytes,6,opt,name=auth_meta,json=authMeta,proto3" json:"auth_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	AuthMap *JsonString `protobuf:"bytes,7,opt,name=auth_map,json=authMap,proto3" json:"auth_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,8,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{21}
}

func (x *Auth) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Auth) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Auth) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Auth) GetUserGroup() UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return UserGroup_GROUP_USER
}

func (x *Auth) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Auth) GetAuthMeta() *AuthMeta {
	if x != nil {
		return x.AuthMeta
	}
	return nil
}

func (x *Auth) GetAuthMap() *JsonString {
	if x != nil {
		return x.AuthMap
	}
	return nil
}

func (x *Auth) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

// CurrencyMeta message
type CurrencyMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the currency.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The number of decimal places used for recording and rounding by the program.
	Digit int64 `protobuf:"varint,2,opt,name=digit,proto3" json:"digit,omitempty"`
	// Rounding value for cash. Could be used in case the smallest banknote in circulation for that certain currency is not 1.
	CashRound int64 `protobuf:"varint,3,opt,name=cash_round,json=cashRound,proto3" json:"cash_round,omitempty"`
	// Additional tags for the currency
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CurrencyMeta) Reset() {
	*x = CurrencyMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyMeta) ProtoMessage() {}

func (x *CurrencyMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyMeta.ProtoReflect.Descriptor instead.
func (*CurrencyMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{22}
}

func (x *CurrencyMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CurrencyMeta) GetDigit() int64 {
	if x != nil {
		return x.Digit
	}
	return 0
}

func (x *CurrencyMeta) GetCashRound() int64 {
	if x != nil {
		return x.CashRound
	}
	return 0
}

func (x *CurrencyMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Currency message
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// The ISO 4217 code of the currency. It cannot be modified after creation.
	Code         string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CurrencyMeta *CurrencyMeta `protobuf:"bytes,3,opt,name=currency_meta,json=currencyMeta,proto3" json:"currency_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	CurrencyMap *JsonString `protobuf:"bytes,4,opt,name=currency_map,json=currencyMap,proto3" json:"currency_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,5,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{23}
}

func (x *Currency) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetCurrencyMeta() *CurrencyMeta {
	if x != nil {
		return x.CurrencyMeta
	}
	return nil
}

func (x *Currency) GetCurrencyMap() *JsonString {
	if x != nil {
		return x.CurrencyMap
	}
	return nil
}

func (x *Currency) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Currencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Currency `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Currencies) Reset() {
	*x = Currencies{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currencies) ProtoMessage() {}

func (x *Currencies) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currencies.ProtoReflect.Descriptor instead.
func (*Currencies) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{24}
}

func (x *Currencies) GetData() []*Currency {
	if x != nil {
		return x.Data
	}
	return nil
}

// CustomerMeta message
type CustomerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxNumber string `protobuf:"bytes,1,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// Tax-free
	TaxFree bool `protobuf:"varint,3,opt,name=tax_free,json=taxFree,proto3" json:"tax_free,omitempty"`
	// Payment per.
	Terms int64 `protobuf:"varint,4,opt,name=terms,proto3" json:"terms,omitempty"`
	// Customer's credit limit. Data is used by financial reports.
	CreditLimit float64 `protobuf:"fixed64,5,opt,name=credit_limit,json=creditLimit,proto3" json:"credit_limit,omitempty"`
	// If new product line is added (offer, order, invoice etc.) all products will receive the discount percentage specified in this field. If the product has a separate customer price, the value specified here will not be considered by the program.
	Discount float64 `protobuf:"fixed64,6,opt,name=discount,proto3" json:"discount,omitempty"`
	Notes    string  `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive bool    `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Additional tags for the customer
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CustomerMeta) Reset() {
	*x = CustomerMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerMeta) ProtoMessage() {}

func (x *CustomerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerMeta.ProtoReflect.Descriptor instead.
func (*CustomerMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{25}
}

func (x *CustomerMeta) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *CustomerMeta) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CustomerMeta) GetTaxFree() bool {
	if x != nil {
		return x.TaxFree
	}
	return false
}

func (x *CustomerMeta) GetTerms() int64 {
	if x != nil {
		return x.Terms
	}
	return 0
}

func (x *CustomerMeta) GetCreditLimit() float64 {
	if x != nil {
		return x.CreditLimit
	}
	return 0
}

func (x *CustomerMeta) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *CustomerMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CustomerMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *CustomerMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Customer message
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: CUS1731101982N123 ("CUS" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field. Default value: CUSTOMER_COMPANY
	CustomerType CustomerType `protobuf:"varint,3,opt,name=customer_type,json=customerType,proto3,enum=nervatura.CustomerType" json:"customer_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Full name of the customer
	CustomerName string        `protobuf:"bytes,4,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	Addresses    []*Address    `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Contacts     []*Contact    `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Events       []*Event      `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	CustomerMeta *CustomerMeta `protobuf:"bytes,8,opt,name=customer_meta,json=customerMeta,proto3" json:"customer_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	CustomerMap *JsonString `protobuf:"bytes,9,opt,name=customer_map,json=customerMap,proto3" json:"customer_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,10,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{26}
}

func (x *Customer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Customer) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Customer) GetCustomerType() CustomerType {
	if x != nil {
		return x.CustomerType
	}
	return CustomerType_CUSTOMER_COMPANY
}

func (x *Customer) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *Customer) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Customer) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Customer) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Customer) GetCustomerMeta() *CustomerMeta {
	if x != nil {
		return x.CustomerMeta
	}
	return nil
}

func (x *Customer) GetCustomerMap() *JsonString {
	if x != nil {
		return x.CustomerMap
	}
	return nil
}

func (x *Customer) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Customers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Customer `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Customers) Reset() {
	*x = Customers{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Customers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customers) ProtoMessage() {}

func (x *Customers) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customers.ProtoReflect.Descriptor instead.
func (*Customers) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{27}
}

func (x *Customers) GetData() []*Customer {
	if x != nil {
		return x.Data
	}
	return nil
}

// EmployeeMeta message
type EmployeeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 date
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// ISO 8601 date
	EndDate  string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Inactive bool   `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Notes    string `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	// Additional tags for the employee
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *EmployeeMeta) Reset() {
	*x = EmployeeMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeMeta) ProtoMessage() {}

func (x *EmployeeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeMeta.ProtoReflect.Descriptor instead.
func (*EmployeeMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{28}
}

func (x *EmployeeMeta) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *EmployeeMeta) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *EmployeeMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *EmployeeMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *EmployeeMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Employee message
type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: EMP1731101982N123 ("EMP" + UNIX Time stamp + "N" + current ID)
	Code         string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Address      *Address      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Contact      *Contact      `protobuf:"bytes,4,opt,name=contact,proto3" json:"contact,omitempty"`
	Events       []*Event      `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	EmployeeMeta *EmployeeMeta `protobuf:"bytes,6,opt,name=employee_meta,json=employeeMeta,proto3" json:"employee_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	EmployeeMap *JsonString `protobuf:"bytes,7,opt,name=employee_map,json=employeeMap,proto3" json:"employee_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,8,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{29}
}

func (x *Employee) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Employee) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Employee) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Employee) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Employee) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Employee) GetEmployeeMeta() *EmployeeMeta {
	if x != nil {
		return x.EmployeeMeta
	}
	return nil
}

func (x *Employee) GetEmployeeMap() *JsonString {
	if x != nil {
		return x.EmployeeMap
	}
	return nil
}

func (x *Employee) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Employees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Employee `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Employees) Reset() {
	*x = Employees{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Employees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employees) ProtoMessage() {}

func (x *Employees) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employees.ProtoReflect.Descriptor instead.
func (*Employees) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{30}
}

func (x *Employees) GetData() []*Employee {
	if x != nil {
		return x.Data
	}
	return nil
}

// ItemMeta message
type ItemMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit        string  `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Qty         float64 `protobuf:"fixed64,2,opt,name=qty,proto3" json:"qty,omitempty"`
	FxPrice     float64 `protobuf:"fixed64,3,opt,name=fx_price,json=fxPrice,proto3" json:"fx_price,omitempty"`
	NetAmount   float64 `protobuf:"fixed64,4,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	Discount    float64 `protobuf:"fixed64,5,opt,name=discount,proto3" json:"discount,omitempty"`
	VatAmount   float64 `protobuf:"fixed64,6,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty"`
	Amount      float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Description string  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Deposit     bool    `protobuf:"varint,9,opt,name=deposit,proto3" json:"deposit,omitempty"`
	OwnStock    float64 `protobuf:"fixed64,10,opt,name=own_stock,json=ownStock,proto3" json:"own_stock,omitempty"`
	ActionPrice bool    `protobuf:"varint,11,opt,name=action_price,json=actionPrice,proto3" json:"action_price,omitempty"`
	// Additional tags for the item
	Tags []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ItemMeta) Reset() {
	*x = ItemMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMeta) ProtoMessage() {}

func (x *ItemMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMeta.ProtoReflect.Descriptor instead.
func (*ItemMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{31}
}

func (x *ItemMeta) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ItemMeta) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *ItemMeta) GetFxPrice() float64 {
	if x != nil {
		return x.FxPrice
	}
	return 0
}

func (x *ItemMeta) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *ItemMeta) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ItemMeta) GetVatAmount() float64 {
	if x != nil {
		return x.VatAmount
	}
	return 0
}

func (x *ItemMeta) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ItemMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemMeta) GetDeposit() bool {
	if x != nil {
		return x.Deposit
	}
	return false
}

func (x *ItemMeta) GetOwnStock() float64 {
	if x != nil {
		return x.OwnStock
	}
	return 0
}

func (x *ItemMeta) GetActionPrice() bool {
	if x != nil {
		return x.ActionPrice
	}
	return false
}

func (x *ItemMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Item message
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: ITM1731101982N123 ("ITM" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Trans">Trans</a>.Code
	TransCode string `protobuf:"bytes,3,opt,name=trans_code,json=transCode,proto3" json:"trans_code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Product">Product</a>.Code
	ProductCode string `protobuf:"bytes,4,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Tax">Tax</a>.Code
	TaxCode  string    `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	ItemMeta *ItemMeta `protobuf:"bytes,6,opt,name=item_meta,json=itemMeta,proto3" json:"item_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	ItemMap *JsonString `protobuf:"bytes,7,opt,name=item_map,json=itemMap,proto3" json:"item_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,8,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{32}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Item) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *Item) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Item) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

func (x *Item) GetItemMeta() *ItemMeta {
	if x != nil {
		return x.ItemMeta
	}
	return nil
}

func (x *Item) GetItemMap() *JsonString {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

func (x *Item) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Item `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Items) Reset() {
	*x = Items{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Items) ProtoMessage() {}

func (x *Items) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Items.ProtoReflect.Descriptor instead.
func (*Items) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{33}
}

func (x *Items) GetData() []*Item {
	if x != nil {
		return x.Data
	}
	return nil
}

// LinkMeta message
type LinkMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qty  float64 `protobuf:"fixed64,1,opt,name=qty,proto3" json:"qty,omitempty"`
	Rate float64 `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate,omitempty"`
	// Additional tags for the link
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *LinkMeta) Reset() {
	*x = LinkMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMeta) ProtoMessage() {}

func (x *LinkMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMeta.ProtoReflect.Descriptor instead.
func (*LinkMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{34}
}

func (x *LinkMeta) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *LinkMeta) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *LinkMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Link message
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: LNK1731101982N123 ("LNK" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	LinkType_1 LinkType `protobuf:"varint,3,opt,name=link_type_1,json=linkType1,proto3,enum=nervatura.LinkType" json:"link_type_1,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to LinkType1.code
	LinkCode_1 string `protobuf:"bytes,4,opt,name=link_code_1,json=linkCode1,proto3" json:"link_code_1,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	LinkType_2 LinkType `protobuf:"varint,5,opt,name=link_type_2,json=linkType2,proto3,enum=nervatura.LinkType" json:"link_type_2,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to LinkType2.code
	LinkCode_2 string    `protobuf:"bytes,6,opt,name=link_code_2,json=linkCode2,proto3" json:"link_code_2,omitempty"`
	LinkMeta   *LinkMeta `protobuf:"bytes,7,opt,name=link_meta,json=linkMeta,proto3" json:"link_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	LinkMap *JsonString `protobuf:"bytes,8,opt,name=link_map,json=linkMap,proto3" json:"link_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,9,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{35}
}

func (x *Link) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Link) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Link) GetLinkType_1() LinkType {
	if x != nil {
		return x.LinkType_1
	}
	return LinkType_LINK_CUSTOMER
}

func (x *Link) GetLinkCode_1() string {
	if x != nil {
		return x.LinkCode_1
	}
	return ""
}

func (x *Link) GetLinkType_2() LinkType {
	if x != nil {
		return x.LinkType_2
	}
	return LinkType_LINK_CUSTOMER
}

func (x *Link) GetLinkCode_2() string {
	if x != nil {
		return x.LinkCode_2
	}
	return ""
}

func (x *Link) GetLinkMeta() *LinkMeta {
	if x != nil {
		return x.LinkMeta
	}
	return nil
}

func (x *Link) GetLinkMap() *JsonString {
	if x != nil {
		return x.LinkMap
	}
	return nil
}

func (x *Link) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Link `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Links) Reset() {
	*x = Links{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Links) ProtoMessage() {}

func (x *Links) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Links.ProtoReflect.Descriptor instead.
func (*Links) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{36}
}

func (x *Links) GetData() []*Link {
	if x != nil {
		return x.Data
	}
	return nil
}

// Log message
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: LOG1731101982N123 ("LOG" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// ENUM field.
	LogType LogType `protobuf:"varint,3,opt,name=log_type,json=logType,proto3,enum=nervatura.LogType" json:"log_type,omitempty"`
	RefType string  `protobuf:"bytes,4,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	// Reference to RefType.code
	RefCode string `protobuf:"bytes,5,opt,name=ref_code,json=refCode,proto3" json:"ref_code,omitempty"`
	// Reference to <a href="#Auth">Auth</a>.Code
	AuthCode string `protobuf:"bytes,6,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	LogMap *JsonString `protobuf:"bytes,7,opt,name=log_map,json=logMap,proto3" json:"log_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,8,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{37}
}

func (x *Log) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Log) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Log) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_LOG_INSERT
}

func (x *Log) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *Log) GetRefCode() string {
	if x != nil {
		return x.RefCode
	}
	return ""
}

func (x *Log) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *Log) GetLogMap() *JsonString {
	if x != nil {
		return x.LogMap
	}
	return nil
}

func (x *Log) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Log `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Logs) Reset() {
	*x = Logs{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs) ProtoMessage() {}

func (x *Logs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs.ProtoReflect.Descriptor instead.
func (*Logs) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{38}
}

func (x *Logs) GetData() []*Log {
	if x != nil {
		return x.Data
	}
	return nil
}

// MovementMeta message
type MovementMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qty    float64 `protobuf:"fixed64,1,opt,name=qty,proto3" json:"qty,omitempty"`
	Notes  string  `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	Shared bool    `protobuf:"varint,3,opt,name=shared,proto3" json:"shared,omitempty"`
	// Additional tags for the movement
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *MovementMeta) Reset() {
	*x = MovementMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovementMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementMeta) ProtoMessage() {}

func (x *MovementMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementMeta.ProtoReflect.Descriptor instead.
func (*MovementMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{39}
}

func (x *MovementMeta) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *MovementMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MovementMeta) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *MovementMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Movement message
type Movement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: MOV1731101982N123 ("MOV" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	MovementType MovementType `protobuf:"varint,3,opt,name=movement_type,json=movementType,proto3,enum=nervatura.MovementType" json:"movement_type,omitempty"`
	// ISO 8601 date-time
	ShippingTime string `protobuf:"bytes,4,opt,name=shipping_time,json=shippingTime,proto3" json:"shipping_time,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Trans">Trans</a>.Code
	TransCode string `protobuf:"bytes,5,opt,name=trans_code,json=transCode,proto3" json:"trans_code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Product">Product</a>.Code
	ProductCode string `protobuf:"bytes,6,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// Reference to <a href="#Tool">Tool</a>.Code
	ToolCode string `protobuf:"bytes,7,opt,name=tool_code,json=toolCode,proto3" json:"tool_code,omitempty"`
	// Reference to <a href="#Place">Place</a>.Code
	PlaceCode string `protobuf:"bytes,8,opt,name=place_code,json=placeCode,proto3" json:"place_code,omitempty"`
	// Reference to <a href="#Item">Item</a>.Code
	ItemCode string `protobuf:"bytes,9,opt,name=item_code,json=itemCode,proto3" json:"item_code,omitempty"`
	// Reference to <a href="#Movement">Movement</a>.Code
	MovementCode string        `protobuf:"bytes,10,opt,name=movement_code,json=movementCode,proto3" json:"movement_code,omitempty"`
	MovementMeta *MovementMeta `protobuf:"bytes,11,opt,name=movement_meta,json=movementMeta,proto3" json:"movement_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	MovementMap *JsonString `protobuf:"bytes,12,opt,name=movement_map,json=movementMap,proto3" json:"movement_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,13,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Movement) Reset() {
	*x = Movement{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Movement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movement) ProtoMessage() {}

func (x *Movement) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movement.ProtoReflect.Descriptor instead.
func (*Movement) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{40}
}

func (x *Movement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Movement) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Movement) GetMovementType() MovementType {
	if x != nil {
		return x.MovementType
	}
	return MovementType_MOVEMENT_INVENTORY
}

func (x *Movement) GetShippingTime() string {
	if x != nil {
		return x.ShippingTime
	}
	return ""
}

func (x *Movement) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *Movement) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Movement) GetToolCode() string {
	if x != nil {
		return x.ToolCode
	}
	return ""
}

func (x *Movement) GetPlaceCode() string {
	if x != nil {
		return x.PlaceCode
	}
	return ""
}

func (x *Movement) GetItemCode() string {
	if x != nil {
		return x.ItemCode
	}
	return ""
}

func (x *Movement) GetMovementCode() string {
	if x != nil {
		return x.MovementCode
	}
	return ""
}

func (x *Movement) GetMovementMeta() *MovementMeta {
	if x != nil {
		return x.MovementMeta
	}
	return nil
}

func (x *Movement) GetMovementMap() *JsonString {
	if x != nil {
		return x.MovementMap
	}
	return nil
}

func (x *Movement) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Movements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Movement `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Movements) Reset() {
	*x = Movements{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Movements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movements) ProtoMessage() {}

func (x *Movements) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movements.ProtoReflect.Descriptor instead.
func (*Movements) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{41}
}

func (x *Movements) GetData() []*Movement {
	if x != nil {
		return x.Data
	}
	return nil
}

// PaymentMeta message
type PaymentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Notes  string  `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// Additional tags for the payment
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PaymentMeta) Reset() {
	*x = PaymentMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMeta) ProtoMessage() {}

func (x *PaymentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMeta.ProtoReflect.Descriptor instead.
func (*PaymentMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{42}
}

func (x *PaymentMeta) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *PaymentMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Payment message
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: PMT1731101982N123 ("PMT" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ISO 8601 date-time
	PaidDate string `protobuf:"bytes,3,opt,name=paid_date,json=paidDate,proto3" json:"paid_date,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Trans">Trans</a>.Code
	TransCode   string       `protobuf:"bytes,4,opt,name=trans_code,json=transCode,proto3" json:"trans_code,omitempty"`
	PaymentMeta *PaymentMeta `protobuf:"bytes,5,opt,name=payment_meta,json=paymentMeta,proto3" json:"payment_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	PaymentMap *JsonString `protobuf:"bytes,6,opt,name=payment_map,json=paymentMap,proto3" json:"payment_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,7,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{43}
}

func (x *Payment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payment) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Payment) GetPaidDate() string {
	if x != nil {
		return x.PaidDate
	}
	return ""
}

func (x *Payment) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *Payment) GetPaymentMeta() *PaymentMeta {
	if x != nil {
		return x.PaymentMeta
	}
	return nil
}

func (x *Payment) GetPaymentMap() *JsonString {
	if x != nil {
		return x.PaymentMap
	}
	return nil
}

func (x *Payment) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Payments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Payment `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Payments) Reset() {
	*x = Payments{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payments) ProtoMessage() {}

func (x *Payments) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payments.ProtoReflect.Descriptor instead.
func (*Payments) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{44}
}

func (x *Payments) GetData() []*Payment {
	if x != nil {
		return x.Data
	}
	return nil
}

// PlaceMeta message
type PlaceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes    string `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive bool   `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Additional tags for the place
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PlaceMeta) Reset() {
	*x = PlaceMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceMeta) ProtoMessage() {}

func (x *PlaceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceMeta.ProtoReflect.Descriptor instead.
func (*PlaceMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{45}
}

func (x *PlaceMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *PlaceMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *PlaceMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Place message
type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: PLA1731101982N123 ("PLA" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	PlaceType PlaceType `protobuf:"varint,3,opt,name=place_type,json=placeType,proto3,enum=nervatura.PlaceType" json:"place_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// The full name of the place.
	PlaceName string `protobuf:"bytes,4,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	// Reference to <a href="#Currency">Currency</a>.Code
	CurrencyCode string     `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Address      *Address   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Contacts     []*Contact `protobuf:"bytes,7,rep,name=contacts,proto3" json:"contacts,omitempty"`
	PlaceMeta    *PlaceMeta `protobuf:"bytes,8,opt,name=place_meta,json=placeMeta,proto3" json:"place_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	PlaceMap *JsonString `protobuf:"bytes,9,opt,name=place_map,json=placeMap,proto3" json:"place_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,10,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{46}
}

func (x *Place) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Place) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Place) GetPlaceType() PlaceType {
	if x != nil {
		return x.PlaceType
	}
	return PlaceType_PLACE_WAREHOUSE
}

func (x *Place) GetPlaceName() string {
	if x != nil {
		return x.PlaceName
	}
	return ""
}

func (x *Place) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Place) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Place) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Place) GetPlaceMeta() *PlaceMeta {
	if x != nil {
		return x.PlaceMeta
	}
	return nil
}

func (x *Place) GetPlaceMap() *JsonString {
	if x != nil {
		return x.PlaceMap
	}
	return nil
}

func (x *Place) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Places struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Place `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Places) Reset() {
	*x = Places{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Places) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Places) ProtoMessage() {}

func (x *Places) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Places.ProtoReflect.Descriptor instead.
func (*Places) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{47}
}

func (x *Places) GetData() []*Place {
	if x != nil {
		return x.Data
	}
	return nil
}

// PriceMeta message
type PriceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceValue float64 `protobuf:"fixed64,1,opt,name=price_value,json=priceValue,proto3" json:"price_value,omitempty"`
	// Additional tags for the price
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PriceMeta) Reset() {
	*x = PriceMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMeta) ProtoMessage() {}

func (x *PriceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMeta.ProtoReflect.Descriptor instead.
func (*PriceMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{48}
}

func (x *PriceMeta) GetPriceValue() float64 {
	if x != nil {
		return x.PriceValue
	}
	return 0
}

func (x *PriceMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Price message
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: PRC1731101982N123 ("PRC" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	PriceType PriceType `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=nervatura.PriceType" json:"price_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Start of validity, mandatory data. ISO 8601 date
	ValidFrom string `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	// End of validity, can be left empty. ISO 8601 date
	ValidTo string `protobuf:"bytes,5,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Product">Product</a>.Code
	ProductCode string `protobuf:"bytes,6,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Currency">Currency</a>.Code
	CurrencyCode string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Optional field. Reference to <a href="#Customer">Customer</a>.Code
	CustomerCode string `protobuf:"bytes,8,opt,name=customer_code,json=customerCode,proto3" json:"customer_code,omitempty"`
	// Price ranges can also be specified, thus different price can be set for a smaller and bigger quantity of the same product.
	// The quantity should be used as the lower threshold, ie. this should be the minimum quantity for the price set.
	Qty       float64    `protobuf:"fixed64,9,opt,name=qty,proto3" json:"qty,omitempty"`
	PriceMeta *PriceMeta `protobuf:"bytes,10,opt,name=price_meta,json=priceMeta,proto3" json:"price_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	PriceMap *JsonString `protobuf:"bytes,11,opt,name=price_map,json=priceMap,proto3" json:"price_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,12,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{49}
}

func (x *Price) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Price) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Price) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_CUSTOMER
}

func (x *Price) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

func (x *Price) GetValidTo() string {
	if x != nil {
		return x.ValidTo
	}
	return ""
}

func (x *Price) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Price) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Price) GetCustomerCode() string {
	if x != nil {
		return x.CustomerCode
	}
	return ""
}

func (x *Price) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Price) GetPriceMeta() *PriceMeta {
	if x != nil {
		return x.PriceMeta
	}
	return nil
}

func (x *Price) GetPriceMap() *JsonString {
	if x != nil {
		return x.PriceMap
	}
	return nil
}

func (x *Price) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Prices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Price `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Prices) Reset() {
	*x = Prices{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Prices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prices) ProtoMessage() {}

func (x *Prices) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prices.ProtoReflect.Descriptor instead.
func (*Prices) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{50}
}

func (x *Prices) GetData() []*Price {
	if x != nil {
		return x.Data
	}
	return nil
}

// ProductMeta message
type ProductMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit string `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	// ENUM field.
	BarcodeType BarcodeType `protobuf:"varint,2,opt,name=barcode_type,json=barcodeType,proto3,enum=nervatura.BarcodeType" json:"barcode_type,omitempty"`
	// Any barcode or QR code data
	BarcodeData string `protobuf:"bytes,3,opt,name=barcode_data,json=barcodeData,proto3" json:"barcode_data,omitempty"`
	// The actual amount of the products identified by the barcode. For example can be used for packaged goods, tray packaging.
	BarcodeQty float64 `protobuf:"fixed64,4,opt,name=barcode_qty,json=barcodeQty,proto3" json:"barcode_qty,omitempty"`
	Notes      string  `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive   bool    `protobuf:"varint,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Additional tags for the product
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ProductMeta) Reset() {
	*x = ProductMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductMeta) ProtoMessage() {}

func (x *ProductMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductMeta.ProtoReflect.Descriptor instead.
func (*ProductMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{51}
}

func (x *ProductMeta) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductMeta) GetBarcodeType() BarcodeType {
	if x != nil {
		return x.BarcodeType
	}
	return BarcodeType_BARCODE_CODE_39
}

func (x *ProductMeta) GetBarcodeData() string {
	if x != nil {
		return x.BarcodeData
	}
	return ""
}

func (x *ProductMeta) GetBarcodeQty() float64 {
	if x != nil {
		return x.BarcodeQty
	}
	return 0
}

func (x *ProductMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ProductMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *ProductMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Product message
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: PRD1731101982N123 ("PRD" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	ProductType ProductType `protobuf:"varint,3,opt,name=product_type,json=productType,proto3,enum=nervatura.ProductType" json:"product_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// The full name of the product or short description.
	ProductName string `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Tax">Tax</a>.Code
	TaxCode     string       `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	Events      []*Event     `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	ProductMeta *ProductMeta `protobuf:"bytes,7,opt,name=product_meta,json=productMeta,proto3" json:"product_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	ProductMap *JsonString `protobuf:"bytes,8,opt,name=product_map,json=productMap,proto3" json:"product_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,9,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{52}
}

func (x *Product) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Product) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_ITEM
}

func (x *Product) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Product) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

func (x *Product) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Product) GetProductMeta() *ProductMeta {
	if x != nil {
		return x.ProductMeta
	}
	return nil
}

func (x *Product) GetProductMap() *JsonString {
	if x != nil {
		return x.ProductMap
	}
	return nil
}

func (x *Product) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Products struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Product `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Products) Reset() {
	*x = Products{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Products) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Products) ProtoMessage() {}

func (x *Products) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Products.ProtoReflect.Descriptor instead.
func (*Products) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{53}
}

func (x *Products) GetData() []*Product {
	if x != nil {
		return x.Data
	}
	return nil
}

// ProjectMeta message
type ProjectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 date
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// ISO 8601 date
	EndDate  string `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Notes    string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive bool   `protobuf:"varint,4,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Additional tags for the project
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ProjectMeta) Reset() {
	*x = ProjectMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMeta) ProtoMessage() {}

func (x *ProjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMeta.ProtoReflect.Descriptor instead.
func (*ProjectMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{54}
}

func (x *ProjectMeta) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ProjectMeta) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ProjectMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ProjectMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *ProjectMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Project message
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: PRJ1731101982N123 ("PRJ" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// The name of the project.
	ProjectName string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Reference to <a href="#Customer">Customer</a>.Code
	CustomerCode string       `protobuf:"bytes,4,opt,name=customer_code,json=customerCode,proto3" json:"customer_code,omitempty"`
	Addresses    []*Address   `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Contacts     []*Contact   `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Events       []*Event     `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	ProjectMeta  *ProjectMeta `protobuf:"bytes,8,opt,name=project_meta,json=projectMeta,proto3" json:"project_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	ProjectMap *JsonString `protobuf:"bytes,9,opt,name=project_map,json=projectMap,proto3" json:"project_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,10,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{55}
}

func (x *Project) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Project) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Project) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Project) GetCustomerCode() string {
	if x != nil {
		return x.CustomerCode
	}
	return ""
}

func (x *Project) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Project) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Project) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Project) GetProjectMeta() *ProjectMeta {
	if x != nil {
		return x.ProjectMeta
	}
	return nil
}

func (x *Project) GetProjectMap() *JsonString {
	if x != nil {
		return x.ProjectMap
	}
	return nil
}

func (x *Project) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Projects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Project `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Projects) Reset() {
	*x = Projects{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Projects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Projects) ProtoMessage() {}

func (x *Projects) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Projects.ProtoReflect.Descriptor instead.
func (*Projects) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{56}
}

func (x *Projects) GetData() []*Project {
	if x != nil {
		return x.Data
	}
	return nil
}

// RateMeta message
type RateMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateValue float64 `protobuf:"fixed64,1,opt,name=rate_value,json=rateValue,proto3" json:"rate_value,omitempty"`
	// Additional tags for the rate
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *RateMeta) Reset() {
	*x = RateMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateMeta) ProtoMessage() {}

func (x *RateMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateMeta.ProtoReflect.Descriptor instead.
func (*RateMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{57}
}

func (x *RateMeta) GetRateValue() float64 {
	if x != nil {
		return x.RateValue
	}
	return 0
}

func (x *RateMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Rate message
type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: RAT1731101982N123 ("RAT" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	RateType RateType `protobuf:"varint,3,opt,name=rate_type,json=rateType,proto3,enum=nervatura.RateType" json:"rate_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ISO 8601 date
	RateDate string `protobuf:"bytes,4,opt,name=rate_date,json=rateDate,proto3" json:"rate_date,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Place">Place</a>.Code
	PlaceCode string `protobuf:"bytes,5,opt,name=place_code,json=placeCode,proto3" json:"place_code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Currency">Currency</a>.Code
	CurrencyCode string    `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	RateMeta     *RateMeta `protobuf:"bytes,7,opt,name=rate_meta,json=rateMeta,proto3" json:"rate_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	RateMap *JsonString `protobuf:"bytes,8,opt,name=rate_map,json=rateMap,proto3" json:"rate_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,9,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{58}
}

func (x *Rate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Rate) GetRateType() RateType {
	if x != nil {
		return x.RateType
	}
	return RateType_RATE_RATE
}

func (x *Rate) GetRateDate() string {
	if x != nil {
		return x.RateDate
	}
	return ""
}

func (x *Rate) GetPlaceCode() string {
	if x != nil {
		return x.PlaceCode
	}
	return ""
}

func (x *Rate) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Rate) GetRateMeta() *RateMeta {
	if x != nil {
		return x.RateMeta
	}
	return nil
}

func (x *Rate) GetRateMap() *JsonString {
	if x != nil {
		return x.RateMap
	}
	return nil
}

func (x *Rate) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Rates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Rate `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Rates) Reset() {
	*x = Rates{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rates) ProtoMessage() {}

func (x *Rates) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rates.ProtoReflect.Descriptor instead.
func (*Rates) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{59}
}

func (x *Rates) GetData() []*Rate {
	if x != nil {
		return x.Data
	}
	return nil
}

// TaxMeta message
type TaxMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	RateValue   float64 `protobuf:"fixed64,2,opt,name=rate_value,json=rateValue,proto3" json:"rate_value,omitempty"`
	// Additional tags for the tax
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TaxMeta) Reset() {
	*x = TaxMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxMeta) ProtoMessage() {}

func (x *TaxMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxMeta.ProtoReflect.Descriptor instead.
func (*TaxMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{60}
}

func (x *TaxMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaxMeta) GetRateValue() float64 {
	if x != nil {
		return x.RateValue
	}
	return 0
}

func (x *TaxMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Tax message
type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Database independent unique external key. It cannot be modified after creation.
	Code    string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	TaxMeta *TaxMeta `protobuf:"bytes,3,opt,name=tax_meta,json=taxMeta,proto3" json:"tax_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	TaxMap *JsonString `protobuf:"bytes,4,opt,name=tax_map,json=taxMap,proto3" json:"tax_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,5,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{61}
}

func (x *Tax) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tax) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Tax) GetTaxMeta() *TaxMeta {
	if x != nil {
		return x.TaxMeta
	}
	return nil
}

func (x *Tax) GetTaxMap() *JsonString {
	if x != nil {
		return x.TaxMap
	}
	return nil
}

func (x *Tax) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Taxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Tax `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Taxes) Reset() {
	*x = Taxes{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Taxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxes) ProtoMessage() {}

func (x *Taxes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxes.ProtoReflect.Descriptor instead.
func (*Taxes) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{62}
}

func (x *Taxes) GetData() []*Tax {
	if x != nil {
		return x.Data
	}
	return nil
}

// ToolMeta message
type ToolMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Notes        string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	Inactive     bool   `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Additional tags for the tool
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ToolMeta) Reset() {
	*x = ToolMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolMeta) ProtoMessage() {}

func (x *ToolMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolMeta.ProtoReflect.Descriptor instead.
func (*ToolMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{63}
}

func (x *ToolMeta) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ToolMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ToolMeta) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *ToolMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Tool message
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: SER1731101982N123 ("SER" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// The description of the tool.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// Reference to <a href="#Product">Product</a>.Code
	ProductCode string    `protobuf:"bytes,4,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	Events      []*Event  `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	ToolMeta    *ToolMeta `protobuf:"bytes,6,opt,name=tool_meta,json=toolMeta,proto3" json:"tool_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	ToolMap *JsonString `protobuf:"bytes,7,opt,name=tool_map,json=toolMap,proto3" json:"tool_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,8,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{64}
}

func (x *Tool) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tool) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Tool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tool) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *Tool) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Tool) GetToolMeta() *ToolMeta {
	if x != nil {
		return x.ToolMeta
	}
	return nil
}

func (x *Tool) GetToolMap() *JsonString {
	if x != nil {
		return x.ToolMap
	}
	return nil
}

func (x *Tool) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Tools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Tool `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Tools) Reset() {
	*x = Tools{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tools) ProtoMessage() {}

func (x *Tools) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tools.ProtoReflect.Descriptor instead.
func (*Tools) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{65}
}

func (x *Tools) GetData() []*Tool {
	if x != nil {
		return x.Data
	}
	return nil
}

// Trans Worksheet message
type Worksheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distance (km)
	Distance float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	// Repair time (hour)
	Repair float64 `protobuf:"fixed64,2,opt,name=repair,proto3" json:"repair,omitempty"`
	// Total time (hour)
	Total float64 `protobuf:"fixed64,3,opt,name=total,proto3" json:"total,omitempty"`
	// Worksheet justification
	Notes string `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Worksheet) Reset() {
	*x = Worksheet{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worksheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worksheet) ProtoMessage() {}

func (x *Worksheet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worksheet.ProtoReflect.Descriptor instead.
func (*Worksheet) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{66}
}

func (x *Worksheet) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Worksheet) GetRepair() float64 {
	if x != nil {
		return x.Repair
	}
	return 0
}

func (x *Worksheet) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Worksheet) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Trans Rent message
type Rent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holidays (day)
	Holiday float64 `protobuf:"fixed64,1,opt,name=holiday,proto3" json:"holiday,omitempty"`
	// Bad tool / machine (hour)
	BadTool float64 `protobuf:"fixed64,2,opt,name=bad_tool,json=badTool,proto3" json:"bad_tool,omitempty"`
	// Other non-eligible
	Other float64 `protobuf:"fixed64,3,opt,name=other,proto3" json:"other,omitempty"`
	// Rent justification
	Notes string `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Rent) Reset() {
	*x = Rent{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rent) ProtoMessage() {}

func (x *Rent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rent.ProtoReflect.Descriptor instead.
func (*Rent) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{67}
}

func (x *Rent) GetHoliday() float64 {
	if x != nil {
		return x.Holiday
	}
	return 0
}

func (x *Rent) GetBadTool() float64 {
	if x != nil {
		return x.BadTool
	}
	return 0
}

func (x *Rent) GetOther() float64 {
	if x != nil {
		return x.Other
	}
	return 0
}

func (x *Rent) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// TransInvoice message
type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName       string `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CompanyAddress    string `protobuf:"bytes,2,opt,name=company_address,json=companyAddress,proto3" json:"company_address,omitempty"`
	CompanyTaxNumber  string `protobuf:"bytes,3,opt,name=company_tax_number,json=companyTaxNumber,proto3" json:"company_tax_number,omitempty"`
	CustomerName      string `protobuf:"bytes,4,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	CustomerAddress   string `protobuf:"bytes,5,opt,name=customer_address,json=customerAddress,proto3" json:"customer_address,omitempty"`
	CustomerTaxNumber string `protobuf:"bytes,6,opt,name=customer_tax_number,json=customerTaxNumber,proto3" json:"customer_tax_number,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{68}
}

func (x *Invoice) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Invoice) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *Invoice) GetCompanyTaxNumber() string {
	if x != nil {
		return x.CompanyTaxNumber
	}
	return ""
}

func (x *Invoice) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *Invoice) GetCustomerAddress() string {
	if x != nil {
		return x.CustomerAddress
	}
	return ""
}

func (x *Invoice) GetCustomerTaxNumber() string {
	if x != nil {
		return x.CustomerTaxNumber
	}
	return ""
}

// TransMeta message
type TransMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 date-time
	DueTime   string `protobuf:"bytes,1,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	RefNumber string `protobuf:"bytes,2,opt,name=ref_number,json=refNumber,proto3" json:"ref_number,omitempty"`
	// ENUM field.
	PaidType PaidType `protobuf:"varint,3,opt,name=paid_type,json=paidType,proto3,enum=nervatura.PaidType" json:"paid_type,omitempty"`
	TaxFree  bool     `protobuf:"varint,4,opt,name=tax_free,json=taxFree,proto3" json:"tax_free,omitempty"`
	Paid     bool     `protobuf:"varint,5,opt,name=paid,proto3" json:"paid,omitempty"`
	Rate     float64  `protobuf:"fixed64,6,opt,name=rate,proto3" json:"rate,omitempty"`
	Closed   bool     `protobuf:"varint,7,opt,name=closed,proto3" json:"closed,omitempty"`
	// ENUM field.
	Status TransStatus `protobuf:"varint,8,opt,name=status,proto3,enum=nervatura.TransStatus" json:"status,omitempty"`
	// ENUM field.
	TransState    TransState `protobuf:"varint,9,opt,name=trans_state,json=transState,proto3,enum=nervatura.TransState" json:"trans_state,omitempty"`
	Notes         string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	InternalNotes string     `protobuf:"bytes,11,opt,name=internal_notes,json=internalNotes,proto3" json:"internal_notes,omitempty"`
	ReportNotes   string     `protobuf:"bytes,12,opt,name=report_notes,json=reportNotes,proto3" json:"report_notes,omitempty"`
	Worksheet     *Worksheet `protobuf:"bytes,13,opt,name=worksheet,proto3" json:"worksheet,omitempty"`
	Rent          *Rent      `protobuf:"bytes,14,opt,name=rent,proto3" json:"rent,omitempty"`
	Invoice       *Invoice   `protobuf:"bytes,15,opt,name=invoice,proto3" json:"invoice,omitempty"`
	// Additional tags for the trans
	Tags []string `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TransMeta) Reset() {
	*x = TransMeta{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransMeta) ProtoMessage() {}

func (x *TransMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransMeta.ProtoReflect.Descriptor instead.
func (*TransMeta) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{69}
}

func (x *TransMeta) GetDueTime() string {
	if x != nil {
		return x.DueTime
	}
	return ""
}

func (x *TransMeta) GetRefNumber() string {
	if x != nil {
		return x.RefNumber
	}
	return ""
}

func (x *TransMeta) GetPaidType() PaidType {
	if x != nil {
		return x.PaidType
	}
	return PaidType_PAID_ONLINE
}

func (x *TransMeta) GetTaxFree() bool {
	if x != nil {
		return x.TaxFree
	}
	return false
}

func (x *TransMeta) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *TransMeta) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TransMeta) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *TransMeta) GetStatus() TransStatus {
	if x != nil {
		return x.Status
	}
	return TransStatus_TRANS_NORMAL
}

func (x *TransMeta) GetTransState() TransState {
	if x != nil {
		return x.TransState
	}
	return TransState_TRANS_OK
}

func (x *TransMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *TransMeta) GetInternalNotes() string {
	if x != nil {
		return x.InternalNotes
	}
	return ""
}

func (x *TransMeta) GetReportNotes() string {
	if x != nil {
		return x.ReportNotes
	}
	return ""
}

func (x *TransMeta) GetWorksheet() *Worksheet {
	if x != nil {
		return x.Worksheet
	}
	return nil
}

func (x *TransMeta) GetRent() *Rent {
	if x != nil {
		return x.Rent
	}
	return nil
}

func (x *TransMeta) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *TransMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Trans message
type Trans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: TRN1731101982N123 ("TRN" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	TransType TransType `protobuf:"varint,3,opt,name=trans_type,json=transType,proto3,enum=nervatura.TransType" json:"trans_type,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ISO 8601 date
	TransDate string `protobuf:"bytes,4,opt,name=trans_date,json=transDate,proto3" json:"trans_date,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	Direction Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=nervatura.Direction" json:"direction,omitempty"`
	// Reference to <a href="#Trans">Trans</a>.Code
	TransCode string `protobuf:"bytes,6,opt,name=trans_code,json=transCode,proto3" json:"trans_code,omitempty"`
	// Reference to <a href="#Customer">Customer</a>.Code
	CustomerCode string `protobuf:"bytes,7,opt,name=customer_code,json=customerCode,proto3" json:"customer_code,omitempty"`
	// Reference to <a href="#Employee">Employee</a>.Code
	EmployeeCode string `protobuf:"bytes,8,opt,name=employee_code,json=employeeCode,proto3" json:"employee_code,omitempty"`
	// Reference to <a href="#Project">Project</a>.Code
	ProjectCode string `protobuf:"bytes,9,opt,name=project_code,json=projectCode,proto3" json:"project_code,omitempty"`
	// Reference to <a href="#Place">Place</a>.Code
	PlaceCode string `protobuf:"bytes,10,opt,name=place_code,json=placeCode,proto3" json:"place_code,omitempty"`
	// Reference to <a href="#Currency">Currency</a>.Code
	CurrencyCode string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Reference to <a href="#Auth">Auth</a>.Code
	AuthCode  string     `protobuf:"bytes,12,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	TransMeta *TransMeta `protobuf:"bytes,13,opt,name=trans_meta,json=transMeta,proto3" json:"trans_meta,omitempty"`
	// Flexible key-value map for additional metadata. The value is any json type.
	TransMap *JsonString `protobuf:"bytes,14,opt,name=trans_map,json=transMap,proto3" json:"trans_map,omitempty"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,15,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Trans) Reset() {
	*x = Trans{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trans) ProtoMessage() {}

func (x *Trans) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trans.ProtoReflect.Descriptor instead.
func (*Trans) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{70}
}

func (x *Trans) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trans) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Trans) GetTransType() TransType {
	if x != nil {
		return x.TransType
	}
	return TransType_TRANS_INVOICE
}

func (x *Trans) GetTransDate() string {
	if x != nil {
		return x.TransDate
	}
	return ""
}

func (x *Trans) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_OUT
}

func (x *Trans) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *Trans) GetCustomerCode() string {
	if x != nil {
		return x.CustomerCode
	}
	return ""
}

func (x *Trans) GetEmployeeCode() string {
	if x != nil {
		return x.EmployeeCode
	}
	return ""
}

func (x *Trans) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Trans) GetPlaceCode() string {
	if x != nil {
		return x.PlaceCode
	}
	return ""
}

func (x *Trans) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Trans) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *Trans) GetTransMeta() *TransMeta {
	if x != nil {
		return x.TransMeta
	}
	return nil
}

func (x *Trans) GetTransMap() *JsonString {
	if x != nil {
		return x.TransMap
	}
	return nil
}

func (x *Trans) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type Transactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Trans `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Transactions) Reset() {
	*x = Transactions{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transactions) ProtoMessage() {}

func (x *Transactions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transactions.ProtoReflect.Descriptor instead.
func (*Transactions) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{71}
}

func (x *Transactions) GetData() []*Trans {
	if x != nil {
		return x.Data
	}
	return nil
}

// Config message
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database primary key
	// Database dependent serial number type. Its value is unique only at table level and may change during data migrations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Database independent unique external key. If not specified, it is generated on creation. It cannot be modified after creation.
	// Example: CNF1731101982N123 ("CNF" + UNIX Time stamp + "N" + current ID)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// <span class="text-red-500 font-bold">*</span> Required field.
	// ENUM field.
	ConfigType ConfigType `protobuf:"varint,3,opt,name=config_type,json=configType,proto3,enum=nervatura.ConfigType" json:"config_type,omitempty"`
	// The data of the config. The value is any json type.
	//
	// Types that are assignable to Data:
	//
	//	*Config_Map
	//	*Config_Shortcut
	//	*Config_Message
	//	*Config_Pattern
	//	*Config_Report
	//	*Config_PrintQueue
	//	*Config_ConfigData
	Data isConfig_Data `protobuf_oneof:"data"`
	// Timestamp of data creation
	TimeStamp string `protobuf:"bytes,11,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{72}
}

func (x *Config) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Config) GetConfigType() ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return ConfigType_CONFIG_MAP
}

func (m *Config) GetData() isConfig_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Config) GetMap() *ConfigMap {
	if x, ok := x.GetData().(*Config_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Config) GetShortcut() *ConfigShortcut {
	if x, ok := x.GetData().(*Config_Shortcut); ok {
		return x.Shortcut
	}
	return nil
}

func (x *Config) GetMessage() *ConfigMessage {
	if x, ok := x.GetData().(*Config_Message); ok {
		return x.Message
	}
	return nil
}

func (x *Config) GetPattern() *ConfigPattern {
	if x, ok := x.GetData().(*Config_Pattern); ok {
		return x.Pattern
	}
	return nil
}

func (x *Config) GetReport() *ConfigReport {
	if x, ok := x.GetData().(*Config_Report); ok {
		return x.Report
	}
	return nil
}

func (x *Config) GetPrintQueue() *ConfigPrintQueue {
	if x, ok := x.GetData().(*Config_PrintQueue); ok {
		return x.PrintQueue
	}
	return nil
}

func (x *Config) GetConfigData() *JsonString {
	if x, ok := x.GetData().(*Config_ConfigData); ok {
		return x.ConfigData
	}
	return nil
}

func (x *Config) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type isConfig_Data interface {
	isConfig_Data()
}

type Config_Map struct {
	Map *ConfigMap `protobuf:"bytes,4,opt,name=map,proto3,oneof"`
}

type Config_Shortcut struct {
	Shortcut *ConfigShortcut `protobuf:"bytes,5,opt,name=shortcut,proto3,oneof"`
}

type Config_Message struct {
	Message *ConfigMessage `protobuf:"bytes,6,opt,name=message,proto3,oneof"`
}

type Config_Pattern struct {
	Pattern *ConfigPattern `protobuf:"bytes,7,opt,name=pattern,proto3,oneof"`
}

type Config_Report struct {
	Report *ConfigReport `protobuf:"bytes,8,opt,name=report,proto3,oneof"`
}

type Config_PrintQueue struct {
	PrintQueue *ConfigPrintQueue `protobuf:"bytes,9,opt,name=print_queue,json=printQueue,proto3,oneof"`
}

type Config_ConfigData struct {
	ConfigData *JsonString `protobuf:"bytes,10,opt,name=config_data,json=configData,proto3,oneof"`
}

func (*Config_Map) isConfig_Data() {}

func (*Config_Shortcut) isConfig_Data() {}

func (*Config_Message) isConfig_Data() {}

func (*Config_Pattern) isConfig_Data() {}

func (*Config_Report) isConfig_Data() {}

func (*Config_PrintQueue) isConfig_Data() {}

func (*Config_ConfigData) isConfig_Data() {}

type Configs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Config `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Configs) Reset() {
	*x = Configs{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{73}
}

func (x *Configs) GetData() []*Config {
	if x != nil {
		return x.Data
	}
	return nil
}

// ConfigMap message
type ConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// ENUM field.
	FieldType   FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=nervatura.FieldType" json:"field_type,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ENUM list if FieldType is ENUM
	// ENUM field. Valid values: ADDRESS, BARCODE, CONTACT, CURRENCY, CUSTOMER, EMPLOYEE, EVENT, ITEM,
	// MOVEMENT, PAYMENT, PLACE, PRICE, PRODUCT, PROJECT, RATE, TAX, TOOL, USER, TRANS,
	// INVOICE, RECEIPT, ORDER, OFFER, WORKSHEET, RENT, DELIVERY,
	// INVENTORY, WAYBILL, PRODUCTION, FORMULA, BANK, CASH
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// ENUM list if FieldType is FILTER
	Filter []MapFilter `protobuf:"varint,5,rep,packed,name=filter,proto3,enum=nervatura.MapFilter" json:"filter,omitempty"`
}

func (x *ConfigMap) Reset() {
	*x = ConfigMap{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMap) ProtoMessage() {}

func (x *ConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMap.ProtoReflect.Descriptor instead.
func (*ConfigMap) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{74}
}

func (x *ConfigMap) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ConfigMap) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_STRING
}

func (x *ConfigMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigMap) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConfigMap) GetFilter() []MapFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// ConfigShortcutField message
type ConfigShortcutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// ENUM field.
	FieldType ShortcutField `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=nervatura.ShortcutField" json:"field_type,omitempty"`
	Order     int64         `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ConfigShortcutField) Reset() {
	*x = ConfigShortcutField{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigShortcutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigShortcutField) ProtoMessage() {}

func (x *ConfigShortcutField) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigShortcutField.ProtoReflect.Descriptor instead.
func (*ConfigShortcutField) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{75}
}

func (x *ConfigShortcutField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ConfigShortcutField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigShortcutField) GetFieldType() ShortcutField {
	if x != nil {
		return x.FieldType
	}
	return ShortcutField_SHORTCUT_STRING
}

func (x *ConfigShortcutField) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

// ConfigShortcut message
type ConfigShortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortcutKey string `protobuf:"bytes,1,opt,name=shortcut_key,json=shortcutKey,proto3" json:"shortcut_key,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Modul       string `protobuf:"bytes,3,opt,name=modul,proto3" json:"modul,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// ENUM field.
	Method   ShortcutMethod         `protobuf:"varint,5,opt,name=method,proto3,enum=nervatura.ShortcutMethod" json:"method,omitempty"`
	Funcname string                 `protobuf:"bytes,6,opt,name=funcname,proto3" json:"funcname,omitempty"`
	Address  string                 `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Fields   []*ConfigShortcutField `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ConfigShortcut) Reset() {
	*x = ConfigShortcut{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigShortcut) ProtoMessage() {}

func (x *ConfigShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigShortcut.ProtoReflect.Descriptor instead.
func (*ConfigShortcut) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{76}
}

func (x *ConfigShortcut) GetShortcutKey() string {
	if x != nil {
		return x.ShortcutKey
	}
	return ""
}

func (x *ConfigShortcut) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigShortcut) GetModul() string {
	if x != nil {
		return x.Modul
	}
	return ""
}

func (x *ConfigShortcut) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ConfigShortcut) GetMethod() ShortcutMethod {
	if x != nil {
		return x.Method
	}
	return ShortcutMethod_METHOD_GET
}

func (x *ConfigShortcut) GetFuncname() string {
	if x != nil {
		return x.Funcname
	}
	return ""
}

func (x *ConfigShortcut) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ConfigShortcut) GetFields() []*ConfigShortcutField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// ConfigMessage message
type ConfigMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Section string `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Lang    string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigMessage) Reset() {
	*x = ConfigMessage{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMessage) ProtoMessage() {}

func (x *ConfigMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMessage.ProtoReflect.Descriptor instead.
func (*ConfigMessage) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{77}
}

func (x *ConfigMessage) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *ConfigMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigMessage) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ConfigMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ConfigPattern message
type ConfigPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ENUM field.
	TransType      TransType `protobuf:"varint,1,opt,name=trans_type,json=transType,proto3,enum=nervatura.TransType" json:"trans_type,omitempty"`
	Description    string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Notes          string    `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	DefaultPattern bool      `protobuf:"varint,4,opt,name=default_pattern,json=defaultPattern,proto3" json:"default_pattern,omitempty"`
}

func (x *ConfigPattern) Reset() {
	*x = ConfigPattern{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigPattern) ProtoMessage() {}

func (x *ConfigPattern) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigPattern.ProtoReflect.Descriptor instead.
func (*ConfigPattern) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{78}
}

func (x *ConfigPattern) GetTransType() TransType {
	if x != nil {
		return x.TransType
	}
	return TransType_TRANS_INVOICE
}

func (x *ConfigPattern) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigPattern) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ConfigPattern) GetDefaultPattern() bool {
	if x != nil {
		return x.DefaultPattern
	}
	return false
}

// ConfigPrintQueue message
type ConfigPrintQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefType    string `protobuf:"bytes,1,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	RefCode    string `protobuf:"bytes,2,opt,name=ref_code,json=refCode,proto3" json:"ref_code,omitempty"`
	Qty        int64  `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	ReportCode string `protobuf:"bytes,4,opt,name=report_code,json=reportCode,proto3" json:"report_code,omitempty"`
	AuthCode   string `protobuf:"bytes,5,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	TimeStamp  string `protobuf:"bytes,6,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *ConfigPrintQueue) Reset() {
	*x = ConfigPrintQueue{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigPrintQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigPrintQueue) ProtoMessage() {}

func (x *ConfigPrintQueue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigPrintQueue.ProtoReflect.Descriptor instead.
func (*ConfigPrintQueue) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{79}
}

func (x *ConfigPrintQueue) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *ConfigPrintQueue) GetRefCode() string {
	if x != nil {
		return x.RefCode
	}
	return ""
}

func (x *ConfigPrintQueue) GetQty() int64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *ConfigPrintQueue) GetReportCode() string {
	if x != nil {
		return x.ReportCode
	}
	return ""
}

func (x *ConfigPrintQueue) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *ConfigPrintQueue) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

// ConfigReport message
type ConfigReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportKey  string `protobuf:"bytes,1,opt,name=report_key,json=reportKey,proto3" json:"report_key,omitempty"`
	ReportType string `protobuf:"bytes,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	// ENUM field.
	TransType *TransType `protobuf:"varint,3,opt,name=trans_type,json=transType,proto3,enum=nervatura.TransType,oneof" json:"trans_type,omitempty"`
	// ENUM field.
	Direction *Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=nervatura.Direction,oneof" json:"direction,omitempty"`
	// ENUM field.
	FileType    FileType `protobuf:"varint,5,opt,name=file_type,json=fileType,proto3,enum=nervatura.FileType" json:"file_type,omitempty"`
	ReportName  string   `protobuf:"bytes,6,opt,name=report_name,json=reportName,proto3" json:"report_name,omitempty"`
	Description string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Label       string   `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	Template    string   `protobuf:"bytes,9,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *ConfigReport) Reset() {
	*x = ConfigReport{}
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReport) ProtoMessage() {}

func (x *ConfigReport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_service_grpc_proto_store_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReport.ProtoReflect.Descriptor instead.
func (*ConfigReport) Descriptor() ([]byte, []int) {
	return file_pkg_service_grpc_proto_store_proto_rawDescGZIP(), []int{80}
}

func (x *ConfigReport) GetReportKey() string {
	if x != nil {
		return x.ReportKey
	}
	return ""
}

func (x *ConfigReport) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *ConfigReport) GetTransType() TransType {
	if x != nil && x.TransType != nil {
		return *x.TransType
	}
	return TransType_TRANS_INVOICE
}

func (x *ConfigReport) GetDirection() Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Direction_DIRECTION_OUT
}

func (x *ConfigReport) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILE_PDF
}

func (x *ConfigReport) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *ConfigReport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigReport) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ConfigReport) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

var File_pkg_service_grpc_proto_store_proto protoreflect.FileDescriptor

var file_pkg_service_grpc_proto_store_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x22,
	0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x44, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x43,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x22, 0x2a, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xa0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x22, 0x7a, 0x0a, 0x0a, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x09, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x80, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xed,
	0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xcc,
	0x02, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x0d, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x22, 0x9b, 0x02, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x79,
	0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x35, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb4, 0x03, 0x0a, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x34, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x34, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x02, 0x0a, 0x08, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x71, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x1e, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x31, 0x12, 0x33, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x6f,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x2a, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x0c,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x71, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xe8, 0x03, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x34, 0x0a, 0x09, 0x4d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4f, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x32, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x8a, 0x03, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa1, 0x03, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x06, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x39,
	0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x93, 0x03, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x54, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x74, 0x61, 0x78, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x61, 0x78, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x2b, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a,
	0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x05, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6b, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x04, 0x52, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb5, 0x04,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61, 0x78, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa8, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x34, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x30, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x85, 0x03, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x3d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x08, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x09, 0x2a,
	0x39, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f,
	0x47, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f,
	0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f,
	0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0c, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x56, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x5f, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x31,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10,
	0x01, 0x2a, 0x74, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x33, 0x39, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x41, 0x4e, 0x5f, 0x38, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x41, 0x4e, 0x5f, 0x31, 0x33,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x48, 0x0a,
	0x08, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x08, 0x50, 0x61, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x4c, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x2a, 0x48,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x48, 0x45, 0x45,
	0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x57, 0x41, 0x59, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x0c, 0x2a, 0x95, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06,
	0x2a, 0xee, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x12, 0x2a, 0xf2, 0x04, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x0c, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41,
	0x58, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x4f, 0x4c, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x14, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x15, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x19, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x57, 0x41, 0x59, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55,
	0x4c, 0x41, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x53, 0x48, 0x10, 0x1f, 0x2a, 0x31, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x75, 0x0a, 0x0d, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x43, 0x55, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04,
	0x2a, 0x26, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x44, 0x46, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x01, 0x2a, 0xce, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x0c, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x41, 0x58, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x0f, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x10, 0x2a, 0xef, 0x0a, 0x0a, 0x08, 0x56, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x53,
	0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4d, 0x50, 0x4c,
	0x4f, 0x59, 0x45, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x10, 0x12, 0x15, 0x0a,
	0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x4d,
	0x41, 0x50, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4d, 0x50,
	0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x16, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x54, 0x41, 0x47, 0x53, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x1a, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x1d, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x57, 0x41, 0x59, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x55, 0x4c, 0x41, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x20, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x22, 0x12, 0x15, 0x0a,
	0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41,
	0x47, 0x53, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x25, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x53, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x28, 0x12, 0x13, 0x0a,
	0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x53,
	0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x2b, 0x12, 0x15, 0x0a,
	0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x41,
	0x47, 0x53, 0x10, 0x2c, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x2e, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x30, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x47, 0x53, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x35, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x4f,
	0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x38, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x39, 0x12, 0x12, 0x0a,
	0x0e, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x54, 0x41, 0x47, 0x53, 0x10, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x3c, 0x2a, 0x39, 0x0a, 0x0c, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x4f, 0x4f, 0x4b, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4f, 0x4b, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x44,
	0x49, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x32, 0xe8, 0x1c, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x48,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x75,
	0x74, 0x68, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x19,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x14, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a,
	0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x65, 0x74, 0x12,
	0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x0e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65,
	0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07,
	0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0f,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x4c,
	0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a,
	0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06,
	0x4c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0e, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x65, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a,
	0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74,
	0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x13, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x09, 0x52, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x54, 0x61, 0x78, 0x1a, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x54, 0x61, 0x78, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x61, 0x78, 0x47, 0x65, 0x74,
	0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0e, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x78, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x10,
	0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x12,
	0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x6f, 0x6f,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x65, 0x72, 0x76, 0x61, 0x74, 0x75, 0x72, 0x61, 0x2f, 0x6e, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x2f, 0x76, 0x36, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_service_grpc_proto_store_proto_rawDescOnce sync.Once
	file_pkg_service_grpc_proto_store_proto_rawDescData = file_pkg_service_grpc_proto_store_proto_rawDesc
)

func file_pkg_service_grpc_proto_store_proto_rawDescGZIP() []byte {
	file_pkg_service_grpc_proto_store_proto_rawDescOnce.Do(func() {
		file_pkg_service_grpc_proto_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_service_grpc_proto_store_proto_rawDescData)
	})
	return file_pkg_service_grpc_proto_store_proto_rawDescData
}

var file_pkg_service_grpc_proto_store_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_pkg_service_grpc_proto_store_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_pkg_service_grpc_proto_store_proto_goTypes = []any{
	(UserGroup)(0),                // 0: nervatura.UserGroup
	(CustomerType)(0),             // 1: nervatura.CustomerType
	(LinkType)(0),                 // 2: nervatura.LinkType
	(LogType)(0),                  // 3: nervatura.LogType
	(MovementType)(0),             // 4: nervatura.MovementType
	(PlaceType)(0),                // 5: nervatura.PlaceType
	(PriceType)(0),                // 6: nervatura.PriceType
	(BarcodeType)(0),              // 7: nervatura.BarcodeType
	(ProductType)(0),              // 8: nervatura.ProductType
	(RateType)(0),                 // 9: nervatura.RateType
	(PaidType)(0),                 // 10: nervatura.PaidType
	(TransStatus)(0),              // 11: nervatura.TransStatus
	(TransState)(0),               // 12: nervatura.TransState
	(Direction)(0),                // 13: nervatura.Direction
	(TransType)(0),                // 14: nervatura.TransType
	(ConfigType)(0),               // 15: nervatura.ConfigType
	(FieldType)(0),                // 16: nervatura.FieldType
	(MapFilter)(0),                // 17: nervatura.MapFilter
	(ShortcutMethod)(0),           // 18: nervatura.ShortcutMethod
	(ShortcutField)(0),            // 19: nervatura.ShortcutField
	(FileType)(0),                 // 20: nervatura.FileType
	(Model)(0),                    // 21: nervatura.Model
	(ViewName)(0),                 // 22: nervatura.ViewName
	(BookmarkType)(0),             // 23: nervatura.BookmarkType
	(*RequestEmpty)(nil),          // 24: nervatura.RequestEmpty
	(*ResponseStatus)(nil),        // 25: nervatura.ResponseStatus
	(*RequestAuthLogin)(nil),      // 26: nervatura.RequestAuthLogin
	(*ResponseAuthLogin)(nil),     // 27: nervatura.ResponseAuthLogin
	(*RequestPasswordChange)(nil), // 28: nervatura.RequestPasswordChange
	(*RequestTokenDecode)(nil),    // 29: nervatura.RequestTokenDecode
	(*ResponseTokenDecode)(nil),   // 30: nervatura.ResponseTokenDecode
	(*RequestGet)(nil),            // 31: nervatura.RequestGet
	(*RequestDelete)(nil),         // 32: nervatura.RequestDelete
	(*RequestQueryFilter)(nil),    // 33: nervatura.RequestQueryFilter
	(*RequestQuery)(nil),          // 34: nervatura.RequestQuery
	(*RequestFunction)(nil),       // 35: nervatura.RequestFunction
	(*RequestView)(nil),           // 36: nervatura.RequestView
	(*RequestDatabase)(nil),       // 37: nervatura.RequestDatabase
	(*JsonString)(nil),            // 38: nervatura.JsonString
	(*JsonBytes)(nil),             // 39: nervatura.JsonBytes
	(*Address)(nil),               // 40: nervatura.Address
	(*Contact)(nil),               // 41: nervatura.Contact
	(*Event)(nil),                 // 42: nervatura.Event
	(*Bookmark)(nil),              // 43: nervatura.Bookmark
	(*AuthMeta)(nil),              // 44: nervatura.AuthMeta
	(*Auth)(nil),                  // 45: nervatura.Auth
	(*CurrencyMeta)(nil),          // 46: nervatura.CurrencyMeta
	(*Currency)(nil),              // 47: nervatura.Currency
	(*Currencies)(nil),            // 48: nervatura.Currencies
	(*CustomerMeta)(nil),          // 49: nervatura.CustomerMeta
	(*Customer)(nil),              // 50: nervatura.Customer
	(*Customers)(nil),             // 51: nervatura.Customers
	(*EmployeeMeta)(nil),          // 52: nervatura.EmployeeMeta
	(*Employee)(nil),              // 53: nervatura.Employee
	(*Employees)(nil),             // 54: nervatura.Employees
	(*ItemMeta)(nil),              // 55: nervatura.ItemMeta
	(*Item)(nil),                  // 56: nervatura.Item
	(*Items)(nil),                 // 57: nervatura.Items
	(*LinkMeta)(nil),              // 58: nervatura.LinkMeta
	(*Link)(nil),                  // 59: nervatura.Link
	(*Links)(nil),                 // 60: nervatura.Links
	(*Log)(nil),                   // 61: nervatura.Log
	(*Logs)(nil),                  // 62: nervatura.Logs
	(*MovementMeta)(nil),          // 63: nervatura.MovementMeta
	(*Movement)(nil),              // 64: nervatura.Movement
	(*Movements)(nil),             // 65: nervatura.Movements
	(*PaymentMeta)(nil),           // 66: nervatura.PaymentMeta
	(*Payment)(nil),               // 67: nervatura.Payment
	(*Payments)(nil),              // 68: nervatura.Payments
	(*PlaceMeta)(nil),             // 69: nervatura.PlaceMeta
	(*Place)(nil),                 // 70: nervatura.Place
	(*Places)(nil),                // 71: nervatura.Places
	(*PriceMeta)(nil),             // 72: nervatura.PriceMeta
	(*Price)(nil),                 // 73: nervatura.Price
	(*Prices)(nil),                // 74: nervatura.Prices
	(*ProductMeta)(nil),           // 75: nervatura.ProductMeta
	(*Product)(nil),               // 76: nervatura.Product
	(*Products)(nil),              // 77: nervatura.Products
	(*ProjectMeta)(nil),           // 78: nervatura.ProjectMeta
	(*Project)(nil),               // 79: nervatura.Project
	(*Projects)(nil),              // 80: nervatura.Projects
	(*RateMeta)(nil),              // 81: nervatura.RateMeta
	(*Rate)(nil),                  // 82: nervatura.Rate
	(*Rates)(nil),                 // 83: nervatura.Rates
	(*TaxMeta)(nil),               // 84: nervatura.TaxMeta
	(*Tax)(nil),                   // 85: nervatura.Tax
	(*Taxes)(nil),                 // 86: nervatura.Taxes
	(*ToolMeta)(nil),              // 87: nervatura.ToolMeta
	(*Tool)(nil),                  // 88: nervatura.Tool
	(*Tools)(nil),                 // 89: nervatura.Tools
	(*Worksheet)(nil),             // 90: nervatura.Worksheet
	(*Rent)(nil),                  // 91: nervatura.Rent
	(*Invoice)(nil),               // 92: nervatura.Invoice
	(*TransMeta)(nil),             // 93: nervatura.TransMeta
	(*Trans)(nil),                 // 94: nervatura.Trans
	(*Transactions)(nil),          // 95: nervatura.Transactions
	(*Config)(nil),                // 96: nervatura.Config
	(*Configs)(nil),               // 97: nervatura.Configs
	(*ConfigMap)(nil),             // 98: nervatura.ConfigMap
	(*ConfigShortcutField)(nil),   // 99: nervatura.ConfigShortcutField
	(*ConfigShortcut)(nil),        // 100: nervatura.ConfigShortcut
	(*ConfigMessage)(nil),         // 101: nervatura.ConfigMessage
	(*ConfigPattern)(nil),         // 102: nervatura.ConfigPattern
	(*ConfigPrintQueue)(nil),      // 103: nervatura.ConfigPrintQueue
	(*ConfigReport)(nil),          // 104: nervatura.ConfigReport
	nil,                           // 105: nervatura.RequestFunction.ArgsEntry
	nil,                           // 106: nervatura.JsonString.DataEntry
	nil,                           // 107: nervatura.Bookmark.ColumnsEntry
}
var file_pkg_service_grpc_proto_store_proto_depIdxs = []int32{
	21,  // 0: nervatura.RequestDelete.model:type_name -> nervatura.Model
	33,  // 1: nervatura.RequestQuery.filters:type_name -> nervatura.RequestQueryFilter
	105, // 2: nervatura.RequestFunction.args:type_name -> nervatura.RequestFunction.ArgsEntry
	22,  // 3: nervatura.RequestView.name:type_name -> nervatura.ViewName
	106, // 4: nervatura.JsonString.data:type_name -> nervatura.JsonString.DataEntry
	38,  // 5: nervatura.Address.address_map:type_name -> nervatura.JsonString
	38,  // 6: nervatura.Contact.contact_map:type_name -> nervatura.JsonString
	38,  // 7: nervatura.Event.event_map:type_name -> nervatura.JsonString
	23,  // 8: nervatura.Bookmark.bookmark_type:type_name -> nervatura.BookmarkType
	38,  // 9: nervatura.Bookmark.filters:type_name -> nervatura.JsonString
	107, // 10: nervatura.Bookmark.columns:type_name -> nervatura.Bookmark.ColumnsEntry
	43,  // 11: nervatura.AuthMeta.bookmarks:type_name -> nervatura.Bookmark
	0,   // 12: nervatura.Auth.user_group:type_name -> nervatura.UserGroup
	44,  // 13: nervatura.Auth.auth_meta:type_name -> nervatura.AuthMeta
	38,  // 14: nervatura.Auth.auth_map:type_name -> nervatura.JsonString
	46,  // 15: nervatura.Currency.currency_meta:type_name -> nervatura.CurrencyMeta
	38,  // 16: nervatura.Currency.currency_map:type_name -> nervatura.JsonString
	47,  // 17: nervatura.Currencies.data:type_name -> nervatura.Currency
	1,   // 18: nervatura.Customer.customer_type:type_name -> nervatura.CustomerType
	40,  // 19: nervatura.Customer.addresses:type_name -> nervatura.Address
	41,  // 20: nervatura.Customer.contacts:type_name -> nervatura.Contact
	42,  // 21: nervatura.Customer.events:type_name -> nervatura.Event
	49,  // 22: nervatura.Customer.customer_meta:type_name -> nervatura.CustomerMeta
	38,  // 23: nervatura.Customer.customer_map:type_name -> nervatura.JsonString
	50,  // 24: nervatura.Customers.data:type_name -> nervatura.Customer
	40,  // 25: nervatura.Employee.address:type_name -> nervatura.Address
	41,  // 26: nervatura.Employee.contact:type_name -> nervatura.Contact
	42,  // 27: nervatura.Employee.events:type_name -> nervatura.Event
	52,  // 28: nervatura.Employee.employee_meta:type_name -> nervatura.EmployeeMeta
	38,  // 29: nervatura.Employee.employee_map:type_name -> nervatura.JsonString
	53,  // 30: nervatura.Employees.data:type_name -> nervatura.Employee
	55,  // 31: nervatura.Item.item_meta:type_name -> nervatura.ItemMeta
	38,  // 32: nervatura.Item.item_map:type_name -> nervatura.JsonString
	56,  // 33: nervatura.Items.data:type_name -> nervatura.Item
	2,   // 34: nervatura.Link.link_type_1:type_name -> nervatura.LinkType
	2,   // 35: nervatura.Link.link_type_2:type_name -> nervatura.LinkType
	58,  // 36: nervatura.Link.link_meta:type_name -> nervatura.LinkMeta
	38,  // 37: nervatura.Link.link_map:type_name -> nervatura.JsonString
	59,  // 38: nervatura.Links.data:type_name -> nervatura.Link
	3,   // 39: nervatura.Log.log_type:type_name -> nervatura.LogType
	38,  // 40: nervatura.Log.log_map:type_name -> nervatura.JsonString
	61,  // 41: nervatura.Logs.data:type_name -> nervatura.Log
	4,   // 42: nervatura.Movement.movement_type:type_name -> nervatura.MovementType
	63,  // 43: nervatura.Movement.movement_meta:type_name -> nervatura.MovementMeta
	38,  // 44: nervatura.Movement.movement_map:type_name -> nervatura.JsonString
	64,  // 45: nervatura.Movements.data:type_name -> nervatura.Movement
	66,  // 46: nervatura.Payment.payment_meta:type_name -> nervatura.PaymentMeta
	38,  // 47: nervatura.Payment.payment_map:type_name -> nervatura.JsonString
	67,  // 48: nervatura.Payments.data:type_name -> nervatura.Payment
	5,   // 49: nervatura.Place.place_type:type_name -> nervatura.PlaceType
	40,  // 50: nervatura.Place.address:type_name -> nervatura.Address
	41,  // 51: nervatura.Place.contacts:type_name -> nervatura.Contact
	69,  // 52: nervatura.Place.place_meta:type_name -> nervatura.PlaceMeta
	38,  // 53: nervatura.Place.place_map:type_name -> nervatura.JsonString
	70,  // 54: nervatura.Places.data:type_name -> nervatura.Place
	6,   // 55: nervatura.Price.price_type:type_name -> nervatura.PriceType
	72,  // 56: nervatura.Price.price_meta:type_name -> nervatura.PriceMeta
	38,  // 57: nervatura.Price.price_map:type_name -> nervatura.JsonString
	73,  // 58: nervatura.Prices.data:type_name -> nervatura.Price
	7,   // 59: nervatura.ProductMeta.barcode_type:type_name -> nervatura.BarcodeType
	8,   // 60: nervatura.Product.product_type:type_name -> nervatura.ProductType
	42,  // 61: nervatura.Product.events:type_name -> nervatura.Event
	75,  // 62: nervatura.Product.product_meta:type_name -> nervatura.ProductMeta
	38,  // 63: nervatura.Product.product_map:type_name -> nervatura.JsonString
	76,  // 64: nervatura.Products.data:type_name -> nervatura.Product
	40,  // 65: nervatura.Project.addresses:type_name -> nervatura.Address
	41,  // 66: nervatura.Project.contacts:type_name -> nervatura.Contact
	42,  // 67: nervatura.Project.events:type_name -> nervatura.Event
	78,  // 68: nervatura.Project.project_meta:type_name -> nervatura.ProjectMeta
	38,  // 69: nervatura.Project.project_map:type_name -> nervatura.JsonString
	79,  // 70: nervatura.Projects.data:type_name -> nervatura.Project
	9,   // 71: nervatura.Rate.rate_type:type_name -> nervatura.RateType
	81,  // 72: nervatura.Rate.rate_meta:type_name -> nervatura.RateMeta
	38,  // 73: nervatura.Rate.rate_map:type_name -> nervatura.JsonString
	82,  // 74: nervatura.Rates.data:type_name -> nervatura.Rate
	84,  // 75: nervatura.Tax.tax_meta:type_name -> nervatura.TaxMeta
	38,  // 76: nervatura.Tax.tax_map:type_name -> nervatura.JsonString
	85,  // 77: nervatura.Taxes.data:type_name -> nervatura.Tax
	42,  // 78: nervatura.Tool.events:type_name -> nervatura.Event
	87,  // 79: nervatura.Tool.tool_meta:type_name -> nervatura.ToolMeta
	38,  // 80: nervatura.Tool.tool_map:type_name -> nervatura.JsonString
	88,  // 81: nervatura.Tools.data:type_name -> nervatura.Tool
	10,  // 82: nervatura.TransMeta.paid_type:type_name -> nervatura.PaidType
	11,  // 83: nervatura.TransMeta.status:type_name -> nervatura.TransStatus
	12,  // 84: nervatura.TransMeta.trans_state:type_name -> nervatura.TransState
	90,  // 85: nervatura.TransMeta.worksheet:type_name -> nervatura.Worksheet
	91,  // 86: nervatura.TransMeta.rent:type_name -> nervatura.Rent
	92,  // 87: nervatura.TransMeta.invoice:type_name -> nervatura.Invoice
	14,  // 88: nervatura.Trans.trans_type:type_name -> nervatura.TransType
	13,  // 89: nervatura.Trans.direction:type_name -> nervatura.Direction
	93,  // 90: nervatura.Trans.trans_meta:type_name -> nervatura.TransMeta
	38,  // 91: nervatura.Trans.trans_map:type_name -> nervatura.JsonString
	94,  // 92: nervatura.Transactions.data:type_name -> nervatura.Trans
	15,  // 93: nervatura.Config.config_type:type_name -> nervatura.ConfigType
	98,  // 94: nervatura.Config.map:type_name -> nervatura.ConfigMap
	100, // 95: nervatura.Config.shortcut:type_name -> nervatura.ConfigShortcut
	101, // 96: nervatura.Config.message:type_name -> nervatura.ConfigMessage
	102, // 97: nervatura.Config.pattern:type_name -> nervatura.ConfigPattern
	104, // 98: nervatura.Config.report:type_name -> nervatura.ConfigReport
	103, // 99: nervatura.Config.print_queue:type_name -> nervatura.ConfigPrintQueue
	38,  // 100: nervatura.Config.config_data:type_name -> nervatura.JsonString
	96,  // 101: nervatura.Configs.data:type_name -> nervatura.Config
	16,  // 102: nervatura.ConfigMap.field_type:type_name -> nervatura.FieldType
	17,  // 103: nervatura.ConfigMap.filter:type_name -> nervatura.MapFilter
	19,  // 104: nervatura.ConfigShortcutField.field_type:type_name -> nervatura.ShortcutField
	18,  // 105: nervatura.ConfigShortcut.method:type_name -> nervatura.ShortcutMethod
	99,  // 106: nervatura.ConfigShortcut.fields:type_name -> nervatura.ConfigShortcutField
	14,  // 107: nervatura.ConfigPattern.trans_type:type_name -> nervatura.TransType
	14,  // 108: nervatura.ConfigReport.trans_type:type_name -> nervatura.TransType
	13,  // 109: nervatura.ConfigReport.direction:type_name -> nervatura.Direction
	20,  // 110: nervatura.ConfigReport.file_type:type_name -> nervatura.FileType
	26,  // 111: nervatura.API.AuthLogin:input_type -> nervatura.RequestAuthLogin
	45,  // 112: nervatura.API.AuthUpdate:input_type -> nervatura.Auth
	31,  // 113: nervatura.API.AuthGet:input_type -> nervatura.RequestGet
	28,  // 114: nervatura.API.AuthPassword:input_type -> nervatura.RequestPasswordChange
	31,  // 115: nervatura.API.AuthPasswordReset:input_type -> nervatura.RequestGet
	24,  // 116: nervatura.API.TokenLogin:input_type -> nervatura.RequestEmpty
	24,  // 117: nervatura.API.TokenRefresh:input_type -> nervatura.RequestEmpty
	29,  // 118: nervatura.API.TokenDecode:input_type -> nervatura.RequestTokenDecode
	37,  // 119: nervatura.API.Database:input_type -> nervatura.RequestDatabase
	32,  // 120: nervatura.API.Delete:input_type -> nervatura.RequestDelete
	35,  // 121: nervatura.API.Function:input_type -> nervatura.RequestFunction
	36,  // 122: nervatura.API.View:input_type -> nervatura.RequestView
	96,  // 123: nervatura.API.ConfigUpdate:input_type -> nervatura.Config
	31,  // 124: nervatura.API.ConfigGet:input_type -> nervatura.RequestGet
	34,  // 125: nervatura.API.ConfigQuery:input_type -> nervatura.RequestQuery
	47,  // 126: nervatura.API.CurrencyUpdate:input_type -> nervatura.Currency
	31,  // 127: nervatura.API.CurrencyGet:input_type -> nervatura.RequestGet
	34,  // 128: nervatura.API.CurrencyQuery:input_type -> nervatura.RequestQuery
	50,  // 129: nervatura.API.CustomerUpdate:input_type -> nervatura.Customer
	31,  // 130: nervatura.API.CustomerGet:input_type -> nervatura.RequestGet
	34,  // 131: nervatura.API.CustomerQuery:input_type -> nervatura.RequestQuery
	53,  // 132: nervatura.API.EmployeeUpdate:input_type -> nervatura.Employee
	31,  // 133: nervatura.API.EmployeeGet:input_type -> nervatura.RequestGet
	34,  // 134: nervatura.API.EmployeeQuery:input_type -> nervatura.RequestQuery
	56,  // 135: nervatura.API.ItemUpdate:input_type -> nervatura.Item
	31,  // 136: nervatura.API.ItemGet:input_type -> nervatura.RequestGet
	34,  // 137: nervatura.API.ItemQuery:input_type -> nervatura.RequestQuery
	59,  // 138: nervatura.API.LinkUpdate:input_type -> nervatura.Link
	31,  // 139: nervatura.API.LinkGet:input_type -> nervatura.RequestGet
	34,  // 140: nervatura.API.LinkQuery:input_type -> nervatura.RequestQuery
	31,  // 141: nervatura.API.LogGet:input_type -> nervatura.RequestGet
	34,  // 142: nervatura.API.LogQuery:input_type -> nervatura.RequestQuery
	64,  // 143: nervatura.API.MovementUpdate:input_type -> nervatura.Movement
	31,  // 144: nervatura.API.MovementGet:input_type -> nervatura.RequestGet
	34,  // 145: nervatura.API.MovementQuery:input_type -> nervatura.RequestQuery
	67,  // 146: nervatura.API.PaymentUpdate:input_type -> nervatura.Payment
	31,  // 147: nervatura.API.PaymentGet:input_type -> nervatura.RequestGet
	34,  // 148: nervatura.API.PaymentQuery:input_type -> nervatura.RequestQuery
	70,  // 149: nervatura.API.PlaceUpdate:input_type -> nervatura.Place
	31,  // 150: nervatura.API.PlaceGet:input_type -> nervatura.RequestGet
	34,  // 151: nervatura.API.PlaceQuery:input_type -> nervatura.RequestQuery
	73,  // 152: nervatura.API.PriceUpdate:input_type -> nervatura.Price
	31,  // 153: nervatura.API.PriceGet:input_type -> nervatura.RequestGet
	34,  // 154: nervatura.API.PriceQuery:input_type -> nervatura.RequestQuery
	76,  // 155: nervatura.API.ProductUpdate:input_type -> nervatura.Product
	31,  // 156: nervatura.API.ProductGet:input_type -> nervatura.RequestGet
	34,  // 157: nervatura.API.ProductQuery:input_type -> nervatura.RequestQuery
	79,  // 158: nervatura.API.ProjectUpdate:input_type -> nervatura.Project
	31,  // 159: nervatura.API.ProjectGet:input_type -> nervatura.RequestGet
	34,  // 160: nervatura.API.ProjectQuery:input_type -> nervatura.RequestQuery
	82,  // 161: nervatura.API.RateUpdate:input_type -> nervatura.Rate
	31,  // 162: nervatura.API.RateGet:input_type -> nervatura.RequestGet
	34,  // 163: nervatura.API.RateQuery:input_type -> nervatura.RequestQuery
	85,  // 164: nervatura.API.TaxUpdate:input_type -> nervatura.Tax
	31,  // 165: nervatura.API.TaxGet:input_type -> nervatura.RequestGet
	34,  // 166: nervatura.API.TaxQuery:input_type -> nervatura.RequestQuery
	88,  // 167: nervatura.API.ToolUpdate:input_type -> nervatura.Tool
	31,  // 168: nervatura.API.ToolGet:input_type -> nervatura.RequestGet
	34,  // 169: nervatura.API.ToolQuery:input_type -> nervatura.RequestQuery
	94,  // 170: nervatura.API.TransUpdate:input_type -> nervatura.Trans
	31,  // 171: nervatura.API.TransGet:input_type -> nervatura.RequestGet
	34,  // 172: nervatura.API.TransQuery:input_type -> nervatura.RequestQuery
	27,  // 173: nervatura.API.AuthLogin:output_type -> nervatura.ResponseAuthLogin
	45,  // 174: nervatura.API.AuthUpdate:output_type -> nervatura.Auth
	45,  // 175: nervatura.API.AuthGet:output_type -> nervatura.Auth
	25,  // 176: nervatura.API.AuthPassword:output_type -> nervatura.ResponseStatus
	25,  // 177: nervatura.API.AuthPasswordReset:output_type -> nervatura.ResponseStatus
	45,  // 178: nervatura.API.TokenLogin:output_type -> nervatura.Auth
	27,  // 179: nervatura.API.TokenRefresh:output_type -> nervatura.ResponseAuthLogin
	30,  // 180: nervatura.API.TokenDecode:output_type -> nervatura.ResponseTokenDecode
	39,  // 181: nervatura.API.Database:output_type -> nervatura.JsonBytes
	25,  // 182: nervatura.API.Delete:output_type -> nervatura.ResponseStatus
	39,  // 183: nervatura.API.Function:output_type -> nervatura.JsonBytes
	39,  // 184: nervatura.API.View:output_type -> nervatura.JsonBytes
	96,  // 185: nervatura.API.ConfigUpdate:output_type -> nervatura.Config
	96,  // 186: nervatura.API.ConfigGet:output_type -> nervatura.Config
	97,  // 187: nervatura.API.ConfigQuery:output_type -> nervatura.Configs
	47,  // 188: nervatura.API.CurrencyUpdate:output_type -> nervatura.Currency
	47,  // 189: nervatura.API.CurrencyGet:output_type -> nervatura.Currency
	48,  // 190: nervatura.API.CurrencyQuery:output_type -> nervatura.Currencies
	50,  // 191: nervatura.API.CustomerUpdate:output_type -> nervatura.Customer
	50,  // 192: nervatura.API.CustomerGet:output_type -> nervatura.Customer
	51,  // 193: nervatura.API.CustomerQuery:output_type -> nervatura.Customers
	53,  // 194: nervatura.API.EmployeeUpdate:output_type -> nervatura.Employee
	53,  // 195: nervatura.API.EmployeeGet:output_type -> nervatura.Employee
	54,  // 196: nervatura.API.EmployeeQuery:output_type -> nervatura.Employees
	56,  // 197: nervatura.API.ItemUpdate:output_type -> nervatura.Item
	56,  // 198: nervatura.API.ItemGet:output_type -> nervatura.Item
	57,  // 199: nervatura.API.ItemQuery:output_type -> nervatura.Items
	59,  // 200: nervatura.API.LinkUpdate:output_type -> nervatura.Link
	59,  // 201: nervatura.API.LinkGet:output_type -> nervatura.Link
	60,  // 202: nervatura.API.LinkQuery:output_type -> nervatura.Links
	61,  // 203: nervatura.API.LogGet:output_type -> nervatura.Log
	62,  // 204: nervatura.API.LogQuery:output_type -> nervatura.Logs
	64,  // 205: nervatura.API.MovementUpdate:output_type -> nervatura.Movement
	64,  // 206: nervatura.API.MovementGet:output_type -> nervatura.Movement
	65,  // 207: nervatura.API.MovementQuery:output_type -> nervatura.Movements
	67,  // 208: nervatura.API.PaymentUpdate:output_type -> nervatura.Payment
	67,  // 209: nervatura.API.PaymentGet:output_type -> nervatura.Payment
	68,  // 210: nervatura.API.PaymentQuery:output_type -> nervatura.Payments
	70,  // 211: nervatura.API.PlaceUpdate:output_type -> nervatura.Place
	70,  // 212: nervatura.API.PlaceGet:output_type -> nervatura.Place
	71,  // 213: nervatura.API.PlaceQuery:output_type -> nervatura.Places
	73,  // 214: nervatura.API.PriceUpdate:output_type -> nervatura.Price
	73,  // 215: nervatura.API.PriceGet:output_type -> nervatura.Price
	74,  // 216: nervatura.API.PriceQuery:output_type -> nervatura.Prices
	76,  // 217: nervatura.API.ProductUpdate:output_type -> nervatura.Product
	76,  // 218: nervatura.API.ProductGet:output_type -> nervatura.Product
	77,  // 219: nervatura.API.ProductQuery:output_type -> nervatura.Products
	79,  // 220: nervatura.API.ProjectUpdate:output_type -> nervatura.Project
	79,  // 221: nervatura.API.ProjectGet:output_type -> nervatura.Project
	80,  // 222: nervatura.API.ProjectQuery:output_type -> nervatura.Projects
	82,  // 223: nervatura.API.RateUpdate:output_type -> nervatura.Rate
	82,  // 224: nervatura.API.RateGet:output_type -> nervatura.Rate
	83,  // 225: nervatura.API.RateQuery:output_type -> nervatura.Rates
	85,  // 226: nervatura.API.TaxUpdate:output_type -> nervatura.Tax
	85,  // 227: nervatura.API.TaxGet:output_type -> nervatura.Tax
	86,  // 228: nervatura.API.TaxQuery:output_type -> nervatura.Taxes
	88,  // 229: nervatura.API.ToolUpdate:output_type -> nervatura.Tool
	88,  // 230: nervatura.API.ToolGet:output_type -> nervatura.Tool
	89,  // 231: nervatura.API.ToolQuery:output_type -> nervatura.Tools
	94,  // 232: nervatura.API.TransUpdate:output_type -> nervatura.Trans
	94,  // 233: nervatura.API.TransGet:output_type -> nervatura.Trans
	95,  // 234: nervatura.API.TransQuery:output_type -> nervatura.Transactions
	173, // [173:235] is the sub-list for method output_type
	111, // [111:173] is the sub-list for method input_type
	111, // [111:111] is the sub-list for extension type_name
	111, // [111:111] is the sub-list for extension extendee
	0,   // [0:111] is the sub-list for field type_name
}

func init() { file_pkg_service_grpc_proto_store_proto_init() }
func file_pkg_service_grpc_proto_store_proto_init() {
	if File_pkg_service_grpc_proto_store_proto != nil {
		return
	}
	file_pkg_service_grpc_proto_store_proto_msgTypes[72].OneofWrappers = []any{
		(*Config_Map)(nil),
		(*Config_Shortcut)(nil),
		(*Config_Message)(nil),
		(*Config_Pattern)(nil),
		(*Config_Report)(nil),
		(*Config_PrintQueue)(nil),
		(*Config_ConfigData)(nil),
	}
	file_pkg_service_grpc_proto_store_proto_msgTypes[80].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_service_grpc_proto_store_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_service_grpc_proto_store_proto_goTypes,
		DependencyIndexes: file_pkg_service_grpc_proto_store_proto_depIdxs,
		EnumInfos:         file_pkg_service_grpc_proto_store_proto_enumTypes,
		MessageInfos:      file_pkg_service_grpc_proto_store_proto_msgTypes,
	}.Build()
	File_pkg_service_grpc_proto_store_proto = out.File
	file_pkg_service_grpc_proto_store_proto_rawDesc = nil
	file_pkg_service_grpc_proto_store_proto_goTypes = nil
	file_pkg_service_grpc_proto_store_proto_depIdxs = nil
}
