# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nervatura.api_pb2 as api__pb2


class APIStub(object):
    """
    Nervatura gRPC API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserLogin = channel.unary_unary(
                '/nervatura.API/UserLogin',
                request_serializer=api__pb2.RequestUserLogin.SerializeToString,
                response_deserializer=api__pb2.ResponseUserLogin.FromString,
                )
        self.UserPassword = channel.unary_unary(
                '/nervatura.API/UserPassword',
                request_serializer=api__pb2.RequestUserPassword.SerializeToString,
                response_deserializer=api__pb2.ResponseEmpty.FromString,
                )
        self.TokenLogin = channel.unary_unary(
                '/nervatura.API/TokenLogin',
                request_serializer=api__pb2.RequestEmpty.SerializeToString,
                response_deserializer=api__pb2.ResponseTokenLogin.FromString,
                )
        self.TokenRefresh = channel.unary_unary(
                '/nervatura.API/TokenRefresh',
                request_serializer=api__pb2.RequestEmpty.SerializeToString,
                response_deserializer=api__pb2.ResponseTokenRefresh.FromString,
                )
        self.TokenDecode = channel.unary_unary(
                '/nervatura.API/TokenDecode',
                request_serializer=api__pb2.RequestTokenDecode.SerializeToString,
                response_deserializer=api__pb2.ResponseTokenDecode.FromString,
                )
        self.Get = channel.unary_unary(
                '/nervatura.API/Get',
                request_serializer=api__pb2.RequestGet.SerializeToString,
                response_deserializer=api__pb2.ResponseGet.FromString,
                )
        self.Update = channel.unary_unary(
                '/nervatura.API/Update',
                request_serializer=api__pb2.RequestUpdate.SerializeToString,
                response_deserializer=api__pb2.ResponseUpdate.FromString,
                )
        self.Delete = channel.unary_unary(
                '/nervatura.API/Delete',
                request_serializer=api__pb2.RequestDelete.SerializeToString,
                response_deserializer=api__pb2.ResponseEmpty.FromString,
                )
        self.View = channel.unary_unary(
                '/nervatura.API/View',
                request_serializer=api__pb2.RequestView.SerializeToString,
                response_deserializer=api__pb2.ResponseView.FromString,
                )
        self.Function = channel.unary_unary(
                '/nervatura.API/Function',
                request_serializer=api__pb2.RequestFunction.SerializeToString,
                response_deserializer=api__pb2.ResponseFunction.FromString,
                )
        self.Report = channel.unary_unary(
                '/nervatura.API/Report',
                request_serializer=api__pb2.RequestReport.SerializeToString,
                response_deserializer=api__pb2.ResponseReport.FromString,
                )
        self.ReportList = channel.unary_unary(
                '/nervatura.API/ReportList',
                request_serializer=api__pb2.RequestReportList.SerializeToString,
                response_deserializer=api__pb2.ResponseReportList.FromString,
                )
        self.ReportInstall = channel.unary_unary(
                '/nervatura.API/ReportInstall',
                request_serializer=api__pb2.RequestReportInstall.SerializeToString,
                response_deserializer=api__pb2.ResponseReportInstall.FromString,
                )
        self.ReportDelete = channel.unary_unary(
                '/nervatura.API/ReportDelete',
                request_serializer=api__pb2.RequestReportDelete.SerializeToString,
                response_deserializer=api__pb2.ResponseEmpty.FromString,
                )
        self.DatabaseCreate = channel.unary_unary(
                '/nervatura.API/DatabaseCreate',
                request_serializer=api__pb2.RequestDatabaseCreate.SerializeToString,
                response_deserializer=api__pb2.ResponseDatabaseCreate.FromString,
                )


class APIServicer(object):
    """
    Nervatura gRPC API
    """

    def UserLogin(self, request, context):
        """Logs in user by username and password
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserPassword(self, request, context):
        """User (employee or customer) password change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TokenLogin(self, request, context):
        """JWT token auth.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TokenRefresh(self, request, context):
        """Refreshes JWT token by checking at database whether refresh token exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TokenDecode(self, request, context):
        """Decoded JWT token but doesn't validate the signature.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get returns one or more records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Add/update one or more items
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete an item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def View(self, request, context):
        """Run raw SQL queries in safe mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Function(self, request, context):
        """Call a server-side function
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Report(self, request, context):
        """Create and download a Nervatura Report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportList(self, request, context):
        """List all available Nervatura Report. Admin user group membership required.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportInstall(self, request, context):
        """Install a report to the database. Admin user group membership required.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportDelete(self, request, context):
        """Delete a report from the database. Admin user group membership required.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DatabaseCreate(self, request, context):
        """Create a new Nervatura database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_APIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLogin,
                    request_deserializer=api__pb2.RequestUserLogin.FromString,
                    response_serializer=api__pb2.ResponseUserLogin.SerializeToString,
            ),
            'UserPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UserPassword,
                    request_deserializer=api__pb2.RequestUserPassword.FromString,
                    response_serializer=api__pb2.ResponseEmpty.SerializeToString,
            ),
            'TokenLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.TokenLogin,
                    request_deserializer=api__pb2.RequestEmpty.FromString,
                    response_serializer=api__pb2.ResponseTokenLogin.SerializeToString,
            ),
            'TokenRefresh': grpc.unary_unary_rpc_method_handler(
                    servicer.TokenRefresh,
                    request_deserializer=api__pb2.RequestEmpty.FromString,
                    response_serializer=api__pb2.ResponseTokenRefresh.SerializeToString,
            ),
            'TokenDecode': grpc.unary_unary_rpc_method_handler(
                    servicer.TokenDecode,
                    request_deserializer=api__pb2.RequestTokenDecode.FromString,
                    response_serializer=api__pb2.ResponseTokenDecode.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=api__pb2.RequestGet.FromString,
                    response_serializer=api__pb2.ResponseGet.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=api__pb2.RequestUpdate.FromString,
                    response_serializer=api__pb2.ResponseUpdate.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=api__pb2.RequestDelete.FromString,
                    response_serializer=api__pb2.ResponseEmpty.SerializeToString,
            ),
            'View': grpc.unary_unary_rpc_method_handler(
                    servicer.View,
                    request_deserializer=api__pb2.RequestView.FromString,
                    response_serializer=api__pb2.ResponseView.SerializeToString,
            ),
            'Function': grpc.unary_unary_rpc_method_handler(
                    servicer.Function,
                    request_deserializer=api__pb2.RequestFunction.FromString,
                    response_serializer=api__pb2.ResponseFunction.SerializeToString,
            ),
            'Report': grpc.unary_unary_rpc_method_handler(
                    servicer.Report,
                    request_deserializer=api__pb2.RequestReport.FromString,
                    response_serializer=api__pb2.ResponseReport.SerializeToString,
            ),
            'ReportList': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportList,
                    request_deserializer=api__pb2.RequestReportList.FromString,
                    response_serializer=api__pb2.ResponseReportList.SerializeToString,
            ),
            'ReportInstall': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportInstall,
                    request_deserializer=api__pb2.RequestReportInstall.FromString,
                    response_serializer=api__pb2.ResponseReportInstall.SerializeToString,
            ),
            'ReportDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportDelete,
                    request_deserializer=api__pb2.RequestReportDelete.FromString,
                    response_serializer=api__pb2.ResponseEmpty.SerializeToString,
            ),
            'DatabaseCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.DatabaseCreate,
                    request_deserializer=api__pb2.RequestDatabaseCreate.FromString,
                    response_serializer=api__pb2.ResponseDatabaseCreate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nervatura.API', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class API(object):
    """
    Nervatura gRPC API
    """

    @staticmethod
    def UserLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/UserLogin',
            api__pb2.RequestUserLogin.SerializeToString,
            api__pb2.ResponseUserLogin.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/UserPassword',
            api__pb2.RequestUserPassword.SerializeToString,
            api__pb2.ResponseEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TokenLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/TokenLogin',
            api__pb2.RequestEmpty.SerializeToString,
            api__pb2.ResponseTokenLogin.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TokenRefresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/TokenRefresh',
            api__pb2.RequestEmpty.SerializeToString,
            api__pb2.ResponseTokenRefresh.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TokenDecode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/TokenDecode',
            api__pb2.RequestTokenDecode.SerializeToString,
            api__pb2.ResponseTokenDecode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/Get',
            api__pb2.RequestGet.SerializeToString,
            api__pb2.ResponseGet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/Update',
            api__pb2.RequestUpdate.SerializeToString,
            api__pb2.ResponseUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/Delete',
            api__pb2.RequestDelete.SerializeToString,
            api__pb2.ResponseEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def View(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/View',
            api__pb2.RequestView.SerializeToString,
            api__pb2.ResponseView.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Function(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/Function',
            api__pb2.RequestFunction.SerializeToString,
            api__pb2.ResponseFunction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Report(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/Report',
            api__pb2.RequestReport.SerializeToString,
            api__pb2.ResponseReport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/ReportList',
            api__pb2.RequestReportList.SerializeToString,
            api__pb2.ResponseReportList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportInstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/ReportInstall',
            api__pb2.RequestReportInstall.SerializeToString,
            api__pb2.ResponseReportInstall.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/ReportDelete',
            api__pb2.RequestReportDelete.SerializeToString,
            api__pb2.ResponseEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DatabaseCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nervatura.API/DatabaseCreate',
            api__pb2.RequestDatabaseCreate.SerializeToString,
            api__pb2.ResponseDatabaseCreate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
