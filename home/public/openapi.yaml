openapi: 3.0.2
info:
  title: Nervatura HTTP REST API
  version: ""
  description: >- 
    The API also has built-in support for:
     - `/auth` Authentication and authorization methods
     
     
     - `/report` Server-side **Nervatura Report** management
     
     - `service` Running server-side functions and tasks
     
       - `/database` Create a new Nervatura database
       
       - `/function` Call a server-side function
     
       - `/view` Run raw SQL queries in safe mode

    You can use **IDs** or **Keys** values to POST and DELETE items. Using IDs
    are faster, but these are not always known. In this case, use Keys values
    instead of IDs.  This is a database-independent, secure, but slightly slower
    method.
        
    With Nervatura it is easy to store a variety of data. If some new
    information is needed for which there have not been any data collected yet,
    the case is simple. Just create a new **Metadata**, specify its type and
    connect it to the data you would like to use it with. The type of the
    Metadata field can be defined in Deffield. If the fieldname does not exist,
    it will be automatically generated (fieldtype = 'string').


    The GET **Filter** string is a pipeline and semicolon separated pattern:
    *fieldname;comparison;value*
          
      * `metadata` Returns (or not) metadata
      
      * `filter`
      
        * `fieldname` Object fieldname
          
        * `comparison` Valid values: *==, !=, <, <=, >, >=, in*
          
        * `value` Field value
        
    All examples can be tested in the demo database!

servers:
  - url: 'http://localhost:5000/api'
tags:
  - name: auth
  - name: address
  - name: barcode
  - name: contact
  - name: currency
  - name: customer
  - name: deffield
  - name: employee
  - name: event
  - name: fieldvalue
  - name: groups
  - name: item
  - name: link
  - name: log
  - name: movement
  - name: numberdef
  - name: pattern
  - name: payment
  - name: place
  - name: price
  - name: product
  - name: project
  - name: rate
  - name: tax
  - name: tool
  - name: trans
  - name: ui_audit
  - name: ui_menu
  - name: ui_menufields
  - name: ui_message
  - name: ui_printqueue
  - name: ui_report
  - name: ui_userconfig
  - name: report
    description: >-
      See more: [Nervatura Report (Node and
      browser)](https://github.com/nervatura/nervatura-report) and [Nervatura Go
      Report](https://github.com/nervatura/go-report)
  - name: service
    description: Running server-side functions and tasks
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs in user by username and password
      description: >-
        Employee `username` or Customer `custnumber` (email or phone number).
        Returns a access token, the type of database and the service version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: >-
                    Employee username or Customer custnumber (email or phone
                    number)
                password:
                  type: string
                database:
                  type: string
                  description: 'Optional. Default value: NT_DEFAULT_ALIAS'
      responses:
        '200':
          description: Token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  engine:
                    type: string
                  version:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/password:
    post:
      tags:
        - auth
      security:
        - BearerAuth: []
      summary: Password change request
      description: User (employee or customer) password change.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirm
              properties:
                password:
                  type: string
                  description: New password
                confirm:
                  type: string
                  description: New password confirmation
                username:
                  type: string
                  description: >-
                    Optional. Only if different from the logged in user. Admin
                    user group membership required.
                custnumber:
                  type: string
                  description: >-
                    Optional. Only if different from the logged in user. Admin
                    user group membership required.
      responses:
        '204':
          description: Password changed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    get:
      tags:
        - auth
      security:
        - BearerAuth: []
      summary: Refreshes JWT token.
      description: >-
        Refreshes JWT token by checking at database whether refresh token
        exists.
      responses:
        '200':
          description: Token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /address:
    post:
      tags:
        - address
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Address Key** value is a generated unique key identifier:
        `{nervatype}/{refnumber}~{rownumber}`. The *rownumber* is the order of
        multiple *{nervatype}/{refnumber}* keys. For example:
        `customer/DMCUST/00001~1`


        **Other Key->ID Options:**

         `nervatype` Valid values: *customer, employee, event, place, product, project, tool, trans*

        `ref_id` Valid values: *customer/{custnumber}, employee/{empnumber},
                event/{calnumber}, place/{planumber}, product/{partnumber},
                project/{pronumber}, tool/{serial}, trans/{transnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Address'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - nervatype: 10
                ref_id: 2
                zipcode: '12345'
                city: BigCity
                notes: Create a new item by IDs
                address_metadata1: value1
                address_metadata2: value2~note2
              - id: 6
                zipcode: '54321'
                city: BigCity
                notes: Update an item by IDs
                address_metadata1: value1
                address_metadata2: value2~note2
              - keys:
                  nervatype: customer
                  ref_id: customer/DMCUST/00001
                zipcode: '12345'
                city: BigCity
                notes: Create a new item by Keys
                address_metadata1: value1
                address_metadata2: value2~note2
              - keys:
                  id: customer/DMCUST/00001~1
                zipcode: '54321'
                city: BigCity
                notes: Update an item by Keys
                address_metadata1: value1
                address_metadata2: value2~note2
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - address
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Addresses

          **Example:**
          
            /api/address?metadata=false&filter=nervatype;==;10|city;in;City1,City2
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype;==;10
            - 'city;in;City1,City2'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
                xml:
                  name: data
                  wrapped: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - address
      security:
        - BearerAuth: []
      summary: Delete an items
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by IDs:

          `/api/address?id=6`
          
          Delete data by Keys:

          `/api/address?key=customer/DMCUST/00001~1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/address/{IDs}':
    get:
      tags:
        - address
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Addresses by IDs

          **Examples:**

          `/api/address/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /barcode:
    post:
      tags:
        - barcode
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: |-
        If the ID value is missing, it creates a new item.
        Returns the all new/updated IDs values.

        The **Barcode Key** value is the `code` field.

        **Other Key->ID Options:**

         `barcodetype` Valid values: *CODE_128, CODE_39, EAN_13, EAN_8, QR*

        `product_id` Valid values: *{partnumber}*
                
        **Examples:**
         * Create a new item by IDs***
         * Update an item by IDs
         * Create a new item by Keys***
         * Update an item by Keys

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Barcode'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - code: BC0122334455
                product_id: 2
                description: Barcode1
                barcodetype: 79
                qty: 0
                defcode: 1
                barcode_metadata1: value1
                barcode_metadata2: value2~note2
              - code: BC0133442255
                description: Barcode1
                qty: 0
                defcode: 0
                keys:
                  product_id: DMPROD/00001
                  barcodetype: CODE_39
              - id: 1
                description: Barcode1
                qty: 5
                defcode: 1
                barcode_metadata1: value1
              - description: Barcode1
                qty: 10
                defcode: 1
                keys:
                  id: BC0123456789
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - barcode
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Barcodes

          **Example:**
          
            /api/barcode?metadata=false&filter=barcodetype;==;79
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - barcodetype;==;79
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Barcode'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - barcode
      security:
        - BearerAuth: []
      summary: Delete an items
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by IDs:

          `/api/barcode?id=2`
          
          Delete data by Keys:

          `/api/barcode?key=BC0101010101`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/barcode/{IDs}':
    get:
      tags:
        - barcode
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Barcodes by IDs

          **Examples:**

          `/api/barcode/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Barcode'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /contact:
    post:
      tags:
        - contact
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Contact Key** value is a generated unique key identifier:
        `{nervatype}/{refnumber}~{rownumber}`. The *rownumber* is the order of
        multiple *{nervatype}/{refnumber}* keys. For example:
        `customer/DMCUST/00001~1`


        **Other Key->ID Options:**

         `nervatype` Valid values: *customer, employee, event, place, product, project, tool, trans*

         `ref_id` Valid values: *customer/{custnumber}, employee/{empnumber}, event/{calnumber}, place/{planumber}, product/{partnumber}, project/{pronumber}, tool/{serial}, trans/{transnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Contact'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - nervatype: 10
                ref_id: 2
                firstname: Big
                surname: Man
                status: manager
                email: man.big@company.co
                notes: Create a new item by IDs
                contact_metadata1: value1
                contact_metadata2: value2~note2
              - id: 6
                firstname: Big
                surname: Man
                status: manager
                email: man.big@company.co
                notes: Update an item by IDs
              - keys:
                  nervatype: customer
                  ref_id: customer/DMCUST/00002
                firstname: Big
                surname: Man
                status: manager
                email: man.big@company.co
                notes: Create a new item by Keys
                contact_metadata1: value1
                contact_metadata2: value2~note2
              - keys:
                  id: customer/DMCUST/00003~1
                firstname: Big
                surname: Man
                status: manager
                email: man.big@company.co
                notes: Update an item by Keys
                contact_metadata1: value1
                contact_metadata2: value2~note2
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - contact
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Contacts

          **Example:**
          
            /api/contact?metadata=false&filter=nervatype;==;10
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype;==;10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - contact
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/contact?id=5`
          
          Delete data by Key:

          `/api/contact?key=customer/DMCUST/00001~1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/contact/{IDs}':
    get:
      tags:
        - contact
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Contacts by IDs

          **Examples:**

          `/api/contact/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /currency:
    post:
      tags:
        - currency
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: |-
        If the ID value is missing, it creates a new item.
        Returns the all new/updated IDs values.

        The **Currency Key** value is the `curr` field.
                
        **Examples:**
         * Create a new item by IDs***
         * Update an item by Keys

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Currency'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - curr: HEL
                description: hello
                digit: 2
                defrate: 0
                cround: 5
              - description: euro...
                keys:
                  id: EUR
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - currency
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Currencies

          **Example:**
          
            /api/currency?metadata=false&filter=curr;==;EUR
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - curr;==;EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - currency
      security:
        - BearerAuth: []
      summary: Delete an items
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by IDs:

          `/api/currency?id=2`
          
          Delete data by Keys:

          `/api/currency?key=EUR`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/currency/{IDs}':
    get:
      tags:
        - currency
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Currencies by IDs

          **Examples:**

          `/api/currency/1,2`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /customer:
    post:
      tags:
        - customer
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Customer Key** value is the `custnumber` field. Unique ID. If you
        set it to ***numberdef***, it will be generated at the first data save.
        The format and value of the next data in row is taken from the numberdef
        (code = custnumber) data series.


        **Other Key->ID Options:**

         `custtype` Valid values: *own, company, private, other*
                
        **Examples:**
         * Create a new item by IDs with customer number***
         * Create a new item by IDs without customer number
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Customer'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - custtype: 116
                custnumber: HELLO123
                custname: Customer1 Co.
                taxnumber: 12345678-1-12
                terms: 8
                creditlimit: 100000
                notes: Create a new item by IDs with customer number
                sample_customer_date: '2019-09-01'
              - custtype: 116
                custname: Customer2 Co.
                taxnumber: 12345678-1-12
                terms: 8
                creditlimit: 100000
                notes: Create a new item by IDs without customer number
                sample_customer_float: 2.3
                keys:
                  custnumber: numberdef
              - taxnumber: 66666666-1-11
                terms: 3
                notes: Update an item by Keys
                keys:
                  id: DMCUST/00001
                  custtype: other
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - customer
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Customers

          **Example:**
          
            /api/customer?metadata=false&filter=custtype;==;128
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - custtype;==;116
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - customer
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/customer?id=4`
          
          Delete data by Key:

          `/api/customer?key=DMCUST/00003`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/customer/{IDs}':
    get:
      tags:
        - customer
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Customers by IDs

          **Examples:**

          `/api/customer/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /deffield:
    post:
      tags:
        - deffield
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **Deffield Key** value is the `fieldname` field. Unique ID. 


        **Other Key->ID Options:**

          `nervatype` Valid values: *address, barcode, contact, currency, customer, employee, event, item, 
           link, log, movement, payment, price, place, product, project, rate, tax, tool, trans, setting*

          `subtype` Valid values: *custtype, placetype, protype, toolgroup, transtype*

          `fieldtype` Valid values: *bool, date, time, float, integer, string, valuelist, notes, 
           urlink, password, customer, tool, transitem, transmovement, transpayment, product, project, 
           employee, place*
                
        **Examples:**
         * Create a new item by Keys***
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Deffield'
            example:
              - fieldname: product_valuelist
                description: Product color valuelist
                valuelist: blue|yellow|white|brown|red
                addnew: 0
                visible: 1
                readonly: 0
                keys:
                  nervatype: product
                  fieldtype: valuelist
              - description: Hello integer
                readonly: 1
                keys:
                  id: sample_employee_integer
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - deffield
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Deffields

          **Example:**
          
            /api/deffield?keys=false&filter=nervatype;==;10
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype;==;10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Deffield'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - deffield
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/nervatype?id=4`
          
          Delete data by Key:

          `/api/nervatype?key=sample_project_state`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/deffield/{IDs}':
    get:
      tags:
        - deffield
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Deffields by IDs

          **Examples:**

          `/api/deffield/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Deffield'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /employee:
    post:
      tags:
        - employee
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Employee Key** value is the `empnumber` field. Unique ID. If you
        set it to ***numberdef***, it will be generated at the first data save.
        The format and value of the next data in row is taken from the numberdef
        (code = empnumber) data series.


        **Other Key->ID Options:**

         `usergroup` Valid values: all groupvalue from GROUPS, where groupname equal usergroup

         `department` Valid values: all groupvalue from GROUPS, where groupname equal department
                
        **Examples:**
         * Create a new item by IDs with employee number***
         * Create a new item by IDs without employee number
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Employee'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - empnumber: BOND-007
                usergroup: 103
                startdate: '2020-12-24'
                department: 139
                sample_employee_integer: 1234
              - username: hello
                startdate: '2020-12-24'
                keys:
                  empnumber: numberdef
                  usergroup: user
              - inactive: 1
                keys:
                  id: DMEMP/00001
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - employee
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Employees

          **Example:**
          
            /api/employee?metadata=false&filter=usergroup;==;103
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - usergroup;==;103
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - employee
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/employee?id=4`
          
          Delete data by Key:

          `/api/employee?key=DMEMP/00001`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/employee/{IDs}':
    get:
      tags:
        - employee
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Employees by IDs

          **Examples:**

          `/api/employee/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /event:
    post:
      tags:
        - event
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Event Key** value is the `calnumber` field. Unique ID. If you set
        it to ***numberdef***, it will be generated at the first data save. The
        format and value of the next data in row is taken from the numberdef
        (code = calnumber) data series.


        **Other Key->ID Options:**

          `nervatype` Valid values: *customer, employee, place, product, project, tool, trans*

          `ref_id` Valid values: *customer/{custnumber}, employee/{empnumber},
                place/{planumber}, product/{partnumber},
                project/{pronumber}, tool/{serial}, trans/{transnumber}*
          
          `eventgroup` Valid values: all groupvalue from GROUPS, where groupname equal eventgroup.
                
        **Examples:**
         * Create a new item by Keys without event number
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Event'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - fromdate: '2020-04-05T08:00:00'
                todate: '2020-04-05T10:00:00'
                subject: First visit
                place: City1
                description: 'It was long ...  :-('
                company_page: 'http://company.com'
                keys:
                  calnumber: numberdef
                  nervatype: customer
                  ref_id: customer/DMCUST/00001
                  eventgroup: visit
              - subject: Second visit...
                keys:
                  id: DMEVT/00002
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - event
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Events

          **Example:**
          
            /api/event?metadata=true&filter=fromdate;>=;2020-01-01
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - fromdate;>=;2020-01-01
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - event
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/event?id=4`
          
          Delete data by Key:

          `/api/event?key=DMEVT/00002`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/event/{IDs}':
    get:
      tags:
        - event
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Events by IDs

          **Examples:**

          `/api/event/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /fieldvalue:
    post:
      tags:
        - fieldvalue
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **Fieldvalue Key** value is a generated unique key identifier:
        `{refnumber}/{fieldname}~{rownumber}`. The *rownumber* is the order of
        multiple *{nervatype}/{refnumber}* keys. For example:
        `DMCUST/00002~~sample_customer_float~1`


        **Other Key->ID Options:**

        `ref_id` Valid values: *{nervatype}/{refnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Create a new item by Keys
         * Update a setting value
         * Update an item by IDs
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Fieldvalue'
            example:
              - fieldname: sample_customer_float
                value: 123.5
                notes: Create a new item by IDs
                ref_id: 3
              - fieldname: sample_customer_float
                value: 321.5
                notes: Create a new item by Keys
                keys:
                  ref_id: customer/DMCUST/00002
              - fieldname: default_paidtype
                value: transfer
                notes: Update a setting value
                keys:
                  id: default_paidtype
              - id: 31
                fieldname: sample_customer_float
                value: 234.5
                notes: Update an item by IDs
              - fieldname: sample_customer_float
                value: 456.7
                notes: Update an item by Keys
                keys:
                  id: DMCUST/00002~~sample_customer_float~1
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - fieldvalue
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Fieldvalues

          **Example:**
          
            /api/fieldvalue?filter=fieldname;==;sample_customer_float
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - fieldname;==;sample_customer_float
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fieldvalue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - fieldvalue
      security:
        - BearerAuth: []
      summary: Delete an items
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by IDs:

          `/api/fieldvalue?id=6`
          
          Delete data by Keys:

          `/api/fieldvalue?key=DMCUST/00002~~sample_customer_float~1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/fieldvalue/{IDs}':
    get:
      tags:
        - fieldvalue
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Fieldvalues by IDs

          **Examples:**

          `/api/fieldvalue/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fieldvalue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /groups:
    post:
      tags:
        - groups
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **Groups Key** value is a generated unique key identifier:
        `{groupname}~{groupvalue}`. For example:  `nervatype~customer`
                
        **Examples:**
         * Create a new item***
         * Update an item by IDs
         * Update an item by Keys

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Groups'
            example:
              - groupname: department
                groupvalue: IT
                description: Create a new item
              - id: 143
                inactive: 1
                description: Update an item by IDs
              - inactive: 1
                description: Update an item by Keys
                keys:
                  id: eventgroup~visit
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - groups
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Groups

          **Example:**
          
            /api/groups?filter=groupname;==;barcodetype
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - groupname;==;barcodetype
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - groups
      security:
        - BearerAuth: []
      summary: Delete an items
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by IDs:

          `/api/groups?id=6`
          
          Delete data by Keys:

          `/api/groups?key=eventgroup~pricing`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/groups/{IDs}':
    get:
      tags:
        - groups
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Groups by IDs

          **Examples:**

          `/api/groups/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /item:
    post:
      tags:
        - item
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Item Key** value is a generated unique key identifier:
        `{transnumber}~{rownumber}`. The *rownumber* is the order of multiple
        *{transnumber}* keys. For example: `DMINV/00001~1`


        **Other Key->ID Options:**

          `trans_id` Valid values: *{transnumber}*
          
          `product_id` Valid values: *{partnumber}*
          
          `tax_id` Valid values: *{taxcode}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Item'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - trans_id: 5
                product_id: 2
                unit: piece
                qty: 3
                fxprice: 166.67
                netamount: 500
                discount: 0
                tax_id: 5
                vatamount: 100
                amount: 600
                description: Big product
              - unit: piece
                qty: 3
                fxprice: 166.67
                netamount: 500
                discount: 0
                vatamount: 100
                amount: 600
                description: Big product
                keys:
                  trans_id: DMINV/00001
                  product_id: DMPROD/00001
                  tax_id: 20%
              - id: 20
                unit: piece
                ownstock: 2
                actionprice: 1
              - unit: piece
                ownstock: 2
                actionprice: 1
                keys:
                  id: DMINV/00002~2
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - item
      security:
        - BearerAuth: []
      summary: Find data by Items
      description: |-
        Returns one or more Event

          **Example:**
          
            /api/item?metadata=true&filter=trans_id;==;5
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - trans_id;==;5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - item
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/item?id=4`
          
          Delete data by Key:

          `/api/item?key=DMINV/00002~2`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/item/{IDs}':
    get:
      tags:
        - item
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Items by IDs

          **Examples:**

          `/api/item/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /link:
    post:
      tags:
        - link
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Link Key** value is a generated unique key identifier:
        `{nervatype_1}~{refnumber_1}~~{nervatype_2}~{refnumber_2}`. For example:
        `movement~DMDEL/00001~3~~item~DMORD/00001~3`


        **Other Key->ID Options:**

          `nervatype_1` Valid values: all groupvalue from GROUPS, where groupname equal nervatype
          
          `ref_id_1` Valid values: *{nervatype_1}/{refnumber}*
          
          `nervatype_2` Valid values: all groupvalue from GROUPS, where groupname equal nervatype
          
          `ref_id_2` Valid values: *{nervatype_2}/{refnumber}*
                
        **Examples:**
         * Create a new item by IDs***
         * Create a new item by Keys***
         * Update an item by IDs
         * Update an item by Keys
         
        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Link'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - nervatype_1: 19
                ref_id_1: 5
                nervatype_2: 15
                ref_id_2: 2
              - keys:
                  nervatype_1: movement
                  ref_id_1: movement/DMDEL/00001~3
                  nervatype_2: item
                  ref_id_2: item/DMORD/00001~2
              - id: 11
                ref_id_1: 5
              - keys:
                  id: movement~DMDEL/00001~3~~item~DMORD/00001~3
                  ref_id_1: movement/DMDEL/00001~3
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - link
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Links

          **Example:**
          
            /api/link?metadata=true&filter=nervatype_1;==;19
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype_1;==;19
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - link
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/link?id=4`
          
          Delete data by Key:

          `/api/link?key=movement~DMDEL/00001~4~~item~DMORD/00001~3`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/link/{IDs}':
    get:
      tags:
        - link
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Link by IDs

          **Examples:**

          `/api/link/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /log:
    post:
      tags:
        - log
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Log Key** value is a generated unique key identifier:
        `{empnumber}~{crdate}`. For example: `admin~2019-09-03T17:46:00`

          The `crdate` field is **read only**!


        **Other Key->ID Options:**

          `employee_id` Valid values: *{empnumber}*
          
          `nervatype` Valid values: all groupvalue from GROUPS, where groupname equal nervatype
          
          `logstate` Valid values: update, closed, deleted, print, login, logout
          
          `ref_id` Valid values: *{nervatype}/{refnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Create a new item by Keys
         
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Log'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - employee_id: 1
                nervatype: 31
                ref_id: 5
                logstate: 98
              - keys:
                  employee_id: admin
                  nervatype: trans
                  ref_id: trans/DMINV/00001
                  logstate: update
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - log
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Logs

          **Example:**
          
            /api/log?metadata=true&filter=nervatype;==;31
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype;==;31
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - log
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/log?id=4`
          
          Delete data by Key:

          `/api/log?key=admin~2019-09-03T17:46:00`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/log/{IDs}':
    get:
      tags:
        - log
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Logs by IDs

          **Examples:**

          `/api/log/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /movement:
    post:
      tags:
        - movement
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Movement Key** value is a generated unique key identifier:
        `{transnumber}~{rownumber}`. The *rownumber* is the order of multiple
        *{transnumber}* keys. For example: `DMDEL/00001~1`


        **Other Key->ID Options:**

          `trans_id` Valid values: *{transnumber}*
          
          `movetype` Valid values: *inventory, tool, plan, head*
          
          `product_id` Valid values: *{partnumber}*
          
          `tool_id` Valid values: *{serial}*
          
          `place_id` Valid values: *{planumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Movement'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - trans_id: 13
                shippingdate: '2019-09-03T00:00:00'
                movetype: 91
                product_id: 8
                place_id: 4
                qty: 50
                description: demo
              - id: 5
                qty: 48
              - shippingdate: '2019-09-03T00:00:00'
                qty: 50
                description: demo
                keys:
                  trans_id: DMDEL/00001
                  movetype: inventory
                  product_id: DMPROD/00007
                  place_id: material
              - qty: 48
                keys:
                  id: DMDEL/00001~2
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - movement
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Movements

          **Example:**
          
            /api/movement?metadata=true&filter=movetype;==;91
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - movetype;==;91
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - movement
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/movement?id=4`
          
          Delete data by Key:

          `/api/movement?key=DMDEL/00001~2`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/movement/{IDs}':
    get:
      tags:
        - movement
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Movements by IDs

          **Examples:**

          `/api/movement/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /numberdef:
    post:
      tags:
        - numberdef
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **Numberdef Key** value is the `numberkey` field. Unique ID.
                
        **Examples:**
         * Update an item by IDs
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Numberdef'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - id: 4
                curvalue: 20
              - curvalue: 6
                keys:
                  id: empnumber
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - numberdef
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Numberdefs

          **Example:**
          
            /api/numberdef?filter=numberkey;==;custnumber
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - numberkey;==;custnumber
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Numberdef'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - numberdef
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/numberdef?id=4`
          
          Delete data by Key:

          `/api/numberdef?key=rent_out`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/numberdef/{IDs}':
    get:
      tags:
        - numberdef
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Numberdefs by IDs

          **Examples:**

          `/api/numberdef/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Numberdef'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /pattern:
    post:
      tags:
        - pattern
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **Pattern Key** value is the `description` field. Unique ID.

          **Other Key->ID Options:**

         `transtype` Valid values: all groupvalue from GROUPS, where groupname equal transtype
                
        **Examples:**
         * Create a new item by IDs***
         * Create a new item by Keys***
         * Update an item by IDs

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Pattern'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - description: Example1
                transtype: 57
                notes: Example text
                defpattern: 1
              - description: Example2
                notes: Example text
                keys:
                  transtype: invoice
              - id: 1
                notes: Example text update
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - pattern
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Patterns

          **Example:**
          
            /api/pattern?filter=transtype;==;57
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - transtype;==;57
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pattern'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - pattern
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/pattern?id=4`
          
          Delete data by Key:

          `/api/pattern?key=Example1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/pattern/{IDs}':
    get:
      tags:
        - pattern
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Patterns by IDs

          **Examples:**

          `/api/pattern/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pattern'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /payment:
    post:
      tags:
        - payment
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Payment Key** value is a generated unique key identifier:
        `{transnumber}~{rownumber}`. The *rownumber* is the order of multiple
        *{transnumber}* keys. For example: `DMPMT/00001~2`


        **Other Key->ID Options:**

          `trans_id` Valid values: *{transnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Payment'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - trans_id: 10
                paiddate: '2019-09-03'
                amount: 100
                notes: Create a new item by IDs
              - id: 3
                amount: 900
                notes: Update an item by IDs
              - paiddate: '2019-09-03'
                amount: 1000
                notes: Create a new item by Keys
                keys:
                  trans_id: DMPMT/00001
              - amount: 1234
                notes: Update an item by Keys
                keys:
                  id: DMPMT/00001~2
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - payment
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Payments

          **Example:**
          
            /api/payment?metadata=true&filter=trans_id;==;10
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - trans_id;==;10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - payment
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/payment?id=4`
          
          Delete data by Key:

          `/api/payment?key=DMPMT/00001~2`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/payment/{IDs}':
    get:
      tags:
        - payment
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Payments by IDs

          **Examples:**

          `/api/payment/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /place:
    post:
      tags:
        - place
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Place Key** value is the `planumber` field. Unique ID. If you set
        it to ***numberdef***, it will be generated at the first data save. The
        format and value of the next data in row is taken from the numberdef
        (code = planumber) data series.


        **Other Key->ID Options:**

         `placetype` Valid values: *bank, cash, warehouse, other*
                
        **Examples:**
         * Create a new item by IDs with planumber number***
         * Create a new item by IDs without planumber number
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Place'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - planumber: warehouse2
                placetype: 127
                description: Warehouse 2
                notes: Create a new item by IDs with planumber number
              - planumber: warehouse3
                description: Warehouse 3
                notes: Create a new item by IDs without planumber number
                keys:
                  placetype: warehouse
              - inactive: 1
                keys:
                  id: warehouse
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - place
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Places

          **Example:**
          
            /api/place?metadata=false&filter=placetype;==;127
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - placetype;==;127
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - place
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/place?id=4`
          
          Delete data by Key:

          `/api/place?key=warehouse`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/place/{IDs}':
    get:
      tags:
        - place
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Places by IDs

          **Examples:**

          `/api/place/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /price:
    post:
      tags:
        - price
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Price Key** value is a generated unique key identifier:
        `{partnumber}~{validfrom}~{curr}~{qty}`. The *rownumber* is the order of
        multiple *{transnumber}* keys. For example:
        `DMPROD/00001~2020-04-05~EUR~0`


        **Other Key->ID Options:**
          
          `product_id` Valid values: *{partnumber}*
                
        **Examples:**
         * Create a new item by IDs
         * Update an item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Price'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - product_id: 2
                validfrom: '2019-01-01'
                curr: EUR
                qty: 0
                pricevalue: 30
              - id: 2
                pricevalue: 22
              - validfrom: '2019-01-01'
                curr: EUR
                qty: 10
                pricevalue: 28
                keys:
                  product_id: DMPROD/00001
              - qty: 5
                keys:
                  id: DMPROD/00001~2020-04-05~EUR~0
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - price
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Movements

          **Example:**
          
            /api/price?metadata=true&filter=product_id;==;2
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - product_id;==;2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - price
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/price?id=4`
          
          Delete data by Key:

          `/api/price?key=DMPROD/00001~2020-04-05~EUR~0`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/price/{IDs}':
    get:
      tags:
        - price
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Prices by IDs

          **Examples:**

          `/api/price/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /product:
    post:
      tags:
        - product
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Product Key** value is the `partnumber` field. Unique ID. If you
        set it to ***numberdef***, it will be generated at the first data save.
        The format and value of the next data in row is taken from the numberdef
        (code = partnumber) data series.


        **Other Key->ID Options:**

         `protype` Valid values: *item, service*
         
         `tax_id` Valid values: *{taxcode}*
                
        **Examples:**
         * Create a new item by IDs with product number***
         * "Create a new item by Keys without project number. The same fieldname can be multiple times. Fromat: fieldname~n: value~notes"
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Product'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - partnumber: PROD123
                protype: 113
                description: Example product 1
                unit: piece
                tax_id: 5
                notes: Create a new item by IDs with product number
                webitem: 1
                sample_product_integer: 2000
              - description: Example product 2
                unit: piece
                notes: >-
                  Create a new item by Keys without project number. The same
                  fieldname can be multiple times. Fromat: fieldname~n:
                  value~notes
                sample_product_valuelist: heavy
                product_element~1: DMPROD/00009~1
                product_element~2: DMPROD/00010~1
                product_element~3: DMPROD/00011~2
                product_element~4: DMPROD/00002~1
                keys:
                  partnumber: numberdef
                  protype: item
                  tax_id: 20%
              - notes: Update an item by Keys
                webitem: 1
                keys:
                  id: DMPROD/00001
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - product
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Products

          **Example:**
          
            /api/product?metadata=false&filter=protype;==;113
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - protype;==;113
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - product
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/product?id=4`
          
          Delete data by Key:

          `/api/product?key=DMPROD/00001`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/product/{IDs}':
    get:
      tags:
        - product
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Products by IDs

          **Examples:**

          `/api/product/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /project:
    post:
      tags:
        - project
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Project Key** value is the `pronumber` field. Unique ID. If you
        set it to ***numberdef***, it will be generated at the first data save.
        The format and value of the next data in row is taken from the numberdef
        (code = pronumber) data series.


        **Other Key->ID Options:**
         
         `customer_id` Valid values: *{custnumber}*
                
        **Examples:**
         * Create a new item by IDs with project number***
         * Create a new item by Keys without project number.
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Project'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - pronumber: PROJECT21
                description: Project 21
                startdate: '2019-09-04'
                notes: Create a new item by IDs with project number
                sample_project_state: 10%~notes value
              - description: Project First Customer Co.
                startdate: '2019-09-04'
                notes: Create a new item by Keys without project number
                keys:
                  pronumber: numberdef
                  customer_id: DMCUST/00001
              - notes: Update an item by Keys
                inactive: 1
                sample_project_state: 100%
                keys:
                  id: DMPRJ/00001
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - project
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Products

          **Example:**
          
            /api/project?metadata=false&filter=customer_id;==;2
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - customer_id;==;2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - project
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/project?id=4`
          
          Delete data by Key:

          `/api/project?key=DMPRJ/00001`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/project/{IDs}':
    get:
      tags:
        - project
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Projects by IDs

          **Examples:**

          `/api/project/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /rate:
    post:
      tags:
        - rate
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.


        The **Rate Key** value is a generated unique key identifier:
        `{ratetype}~{ratedate}~{curr}~{planumber}`. For example:
        `rate~2020-04-05~EUR~bank`


        **Other Key->ID Options:**
          
          `ratetype` Valid values: *rate, buy, sell, average*
          
          `place_id` Valid values: *{partnumber}*
          
          `rategroup` Valid values: all groupvalue from GROUPS, where groupname equal rategroup.
                
        **Examples:**
         * Create a new item by IDs
         * Create a new item by Keys
         * Update an item by Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Rate'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - ratetype: 83
                ratedate: '2019-08-01'
                curr: USD
                place_id: 1
                ratevalue: 0.9143
              - ratedate: '2019-09-01'
                curr: USD
                ratevalue: 0.9043
                keys:
                  ratetype: average
                  place_id: bank
              - ratevalue: 0.9012
                keys:
                  id: average~2019-09-01~USD~bank
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - rate
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Movements

          **Example:**
          
            /api/rate?metadata=true&filter=ratetype;==;83
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - ratetype;==;83
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - rate
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/rate?id=4`
          
          Delete data by Key:

          `/api/rate?key=rate~2020-04-05~EUR~bank`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/rate/{IDs}':
    get:
      tags:
        - rate
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Rates by IDs

          **Examples:**

          `/api/rate/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /tax:
    post:
      tags:
        - tax
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: |-
        If the ID (or Key) value is missing, it creates a new item.
        Returns the all new/updated IDs values.

        The **Tax Key** value is the `taxcode` field. Unique ID.

                
        **Examples:**
         * Create a new item by IDs with taxcode***
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Tax'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - taxcode: 18%
                description: VAT 18%
                rate: 0.18
              - inactive: 1
                keys:
                  id: 10%
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - tax
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Products

          **Example:**
          
            /api/tax?metadata=false&filter=rate;>=;0.15
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - rate;>=;0.15
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tax'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - tax
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/tax?id=4`
          
          Delete data by Key:

          `/api/tax?key=18%`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/tax/{IDs}':
    get:
      tags:
        - tax
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Projects by IDs

          **Examples:**

          `/api/tax/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tax'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /tool:
    post:
      tags:
        - tool
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Tool Key** value is the `serial` field. Unique ID. If you set it
        to ***numberdef***, it will be generated at the first data save. The
        format and value of the next data in row is taken from the numberdef
        (code = serial) data series.


        **Other Key->ID Options:**
         
         `product_id` Valid values: *{partnumber}*
         
         `toolgroup` Valid values: all groupvalue from GROUPS, where groupname equal toolgroup.
                
        **Examples:**
         * Create a new item by IDs with serial number***
         * Create a new item by Keys without serial number
         * Update an item by Keys
         
         *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Tool'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - serial: IJK-123
                description: Company car 3.
                product_id: 5
                notes: Create a new item by IDs with serial number
                sample_tool_color: white
              - inactive: 1
                notes: Update an item by Keys
                keys:
                  id: DEF-456
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - tool
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Products

          **Example:**
          
            /api/tool?metadata=false&filter=product_id;==;5
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - product_id;==;5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - tool
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/tool?id=4`
          
          Delete data by Key:

          `/api/tool?key=DEF-456`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/tool/{IDs}':
    get:
      tags:
        - tool
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Tools by IDs

          **Examples:**

          `/api/tool/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /trans:
    post:
      tags:
        - trans
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item.

        Returns the all new/updated IDs values.


        The **Trans Key** value is the `transnumber` field. Unique ID. If you
        set it to ***[numberdef, {transtype}_{direction}]***, it will be
        generated at the first data save. The format and value of the next data
        in row is taken from the numberdef (code = {transtype}_{direction}) data
        series. Examples: *[numberdef, invoice_out], [numberdef, order_in],
        [numberdef, delivery_transfer]*.


        **Other Key->ID Options:**
         
         `transtype` Valid values: all groupvalue from GROUPS, where groupname equal transtype.
         
         `direction` Valid values: *in, out, transfer*
         
         `customer_id` Valid values: *{custnumber}*
         
         `employee_id` Valid values: *{empnumber}*
         
         `project_id` Valid values: *{pronumber}*
         
         `place_id` Valid values: *{planumber}*
         
         `department` Valid values: all groupvalue from GROUPS, where groupname equal department.
         
         `paidtype` Valid values: all groupvalue from GROUPS, where groupname equal paidtype.
         
         `transtate` Valid values: all groupvalue from GROUPS, where groupname equal transtate.
         
                
        **Examples:**
         * Create a new item by IDs
         * Create a new item by Keys
         * Update an item by Keys
         
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Trans'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - transtype: 55
                direction: 68
                crdate: '2019-09-01'
                transdate: '2019-09-01'
                duedate: '2019-09-08T00:00:00'
                customer_id: 2
                department: 138
                paidtype: 123
                curr: EUR
                notes: Create a new item by IDs
                fnote: >-
                  A long and <b><i>rich text</b></i> at the bottom of the
                  invoice...<br><br>Can be multiple lines ...
                transtate: 93
                keys:
                  transnumber:
                    - numberdef
                    - invoice_out
              - crdate: '2019-09-01'
                transdate: '2019-09-01'
                duedate: '2019-09-08T00:00:00'
                curr: EUR
                notes: Create a new item by Keys
                keys:
                  transnumber:
                    - numberdef
                    - invoice_out
                  transtype: invoice
                  direction: out
                  customer_id: DMCUST/00001
                  department: sales
                  paidtype: transfer
                  transtate: ok
              - paid: 1
                closed: 1
                notes: Update an item by Keys
                keys:
                  id: DMINV/00001
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - trans
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Products

          **Example:**
          
            /api/trans?metadata=false&filter=customer_id;==;2
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - customer_id;==;2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trans'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - trans
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/trans?id=4`
          
          Delete data by Key:

          `/api/trans?key=DEF-456`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/trans/{IDs}':
    get:
      tags:
        - trans
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more Trans by IDs

          **Examples:**

          `/api/trans/4,6`
      parameters:
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trans'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_audit:
    post:
      tags:
        - ui_audit
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiAudit Key** value is a generated unique key identifier:
        `{usergroup}~{nervatype}~{transtype}`. For example: `user~trans~invoice`

          **Other Key->ID Options:**

         `usergroup` Valid values: all groupvalue from GROUPS, where groupname equal usergroup
         
         `nervatype` Valid values: all groupvalue from GROUPS, where groupname equal nervatype
         
         `subtype` Valid values: all groupvalue from GROUPS, where groupname equal *transtype, movetype, protype, custtype, placetype*
         
         `inputfilter` Valid values: all groupvalue from GROUPS, where groupname equal inputfilter
                
        **Examples:**
         * Create a new item by IDs***
         * Create a new item by Keys***

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiAudit'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - usergroup: 103
                nervatype: 31
                subtype: 59
                inputfilter: 107
              - keys:
                  usergroup: guest
                  nervatype: customer
                  inputfilter: disabled
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_audit
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more Patterns

          **Example:**
          
            /api/ui_audit?filter=usergroup;==;103
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - usergroup;==;103
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiAudit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_audit
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_audit?id=4`
          
          Delete data by Key:

          `/api/ui_audit?key=user~trans~invoice`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_audit/{IDs}':
    get:
      tags:
        - ui_audit
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiAudits by IDs

          **Examples:**

          `/api/ui_audit/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiAudit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_menu:
    post:
      tags:
        - ui_menu
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiMenu Key** value is the `menukey` field. Unique ID.
                
        **Examples:**
         * Create a new item by IDs***
         * Update an item by Keys

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiMenu'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - menukey: mnu_exp_4
                description: Create a new item by IDs
                funcname: ExampleFunction
                keys:
                  method: get
              - modul: sample
                keys:
                  id: nextNumber
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_menu
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiMenus

          **Example:**
          
            /api/ui_menu?filter=modul;==;sample
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - modul;==;sample
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMenu'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_menu
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_menu?id=4`
          
          Delete data by Key:

          `/api/ui_menu?key=mnu_exp_1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_menu/{IDs}':
    get:
      tags:
        - ui_menu
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiMenus by IDs

          **Examples:**

          `/api/ui_menu/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMenu'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_menufields:
    post:
      tags:
        - ui_menufields
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiMenufields Key** value is a generated unique key identifier:
        `{menukey}~{fieldname}`. For example: `mnu_exp_1~number_1`

          **Other Key->ID Options:**.
          
          `menu_id` Valid values: *{menukey}*
          
          `fieldtype` Valid values: *bool, date, integer, float, string*
                
        **Examples:**
         * Create a new item by Keys***
         * Update an item by Keys

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiMenufields'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - fieldname: number_3
                description: Example number
                orderby: 2
                keys:
                  menu_id: mnu_exp_4
                  fieldtype: integer
              - description: Stepping...
                keys:
                  id: nextNumber~step
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_menufields
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiMenufields

          **Example:**
          
            /api/ui_menufields?filter=menu_id;==;1
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - menu_id;==;1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMenufields'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_menufields
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_menufields?id=4`
          
          Delete data by Key:

          `/api/ui_menufields?key=mnu_exp_1~number_1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_menufields/{IDs}':
    get:
      tags:
        - ui_menufields
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiMenufields by IDs

          **Examples:**

          `/api/ui_menufields/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMenufields'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_message:
    post:
      tags:
        - ui_message
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiMessage Key** value is a generated unique key identifier:
        `{secname}~{fieldname}~{lang}`. For example:
        `ntr_bank_en_report~lb_ref_no`
                
        **Examples:**
         * Create a new item by IDs***

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiMessage'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - secname: example_report
                fieldname: example_field
                lang: en
                msg: Hello
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_message
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiMessage

          **Example:**
          
            /api/ui_message?filter=secname;==;example_report
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - secname;==;example_report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_message
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_message?id=4`
          
          Delete data by Key:

          `/api/ui_message?key=example_report~example_field`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_message/{IDs}':
    get:
      tags:
        - ui_message
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiMessages by IDs

          **Examples:**

          `/api/ui_message/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_printqueue:
    post:
      tags:
        - ui_printqueue
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID value is missing, it creates a new item. Returns the all
        new/updated IDs values.

          **You can't use Metadata!**
                
        **Examples:**
         * Create a new item by IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiPrintqueue'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - nervatype: 31
                ref_id: 5
                qty: 3
                employee_id: 1
                report_id: 12
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_printqueue
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiPrintqueus

          **Example:**
          
            /api/ui_printqueue?filter=nervatype;==;31
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - nervatype;==;31
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiPrintqueue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_printqueue
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_message?id=4`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_printqueue/{IDs}':
    get:
      tags:
        - ui_printqueue
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiPrintqueus by IDs

          **Examples:**

          `/api/ui_printqueue/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiPrintqueue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_report:
    post:
      tags:
        - ui_report
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiReport Key** value is the `reportkey` field. Unique ID.

        **Other Key->ID Options:**

         `nervatype` Valid values: all groupvalue from GROUPS, where groupname equal nervatype
         
         `transtype` Valid values: all groupvalue from GROUPS, where groupname equal transtype
         
         `direction` Valid values: *in, out, transfer*
         
         `filetype` Valid values: all groupvalue from GROUPS, where groupname equal filetype
                
        **Examples:**
         * Create a new item by IDs***
         * Create a new item by Keys***

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiReport'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - reportkey: example_report_1
                nervatype: 31
                transtype: 57
                direction: 70
                repname: Example Report 1
                description: Create a new item by IDs
                label: Invoice
                filetype: 54
                report: {}
              - reportkey: example_report_2
                repname: Example Report 2
                description: Create a new item by Keys
                label: Invoice
                report: {}
                keys:
                  nervatype: trans
                  transtype: invoice
                  direction: out
                  filetype: pdf
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_report
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiReports

          **Example:**
          
            /api/ui_report?filter=label;==;Invoice
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - label;==;Invoice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_report
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_report?id=4`
          
          Delete data by Key:

          `/api/ui_report?key=example_report_1`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_report/{IDs}':
    get:
      tags:
        - ui_report
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiReports by IDs

          **Examples:**

          `/api/ui_report/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ui_userconfig:
    post:
      tags:
        - ui_userconfig
      security:
        - BearerAuth: []
      summary: Add/update one or more items
      description: >-
        If the ID (or Key) value is missing, it creates a new item. Returns the
        all new/updated IDs values.

          **You can't use Metadata!**

        The **UiUserconfig Key** value is a generated unique key identifier:
        `{empnumber}~{section}~{cfgroup}~{cfname}`. For example:
        `demo~bookmark~editor~DMINV/00002`

          **Other Key->ID Options:**.
          
          `employee_id` Valid values: *{empnumber}*
                
        **Examples:**
         * Create a new item by IDs***

        *** *You can only run once!*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/UiUserconfig'
                  - $ref: '#/components/schemas/Metafields'
            example:
              - employee_id: 4
                section: bookmark
                cfgroup: editor
                cfname: DMINV/00002
                cfvalue: example
                orderby: 0
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - ui_userconfig
      security:
        - BearerAuth: []
      summary: Find data by Filter
      description: |-
        Returns one or more UiUserconfigs

          **Example:**
          
            /api/ui_userconfig?filter=section;==;bookmark
      parameters:
        - in: query
          name: filter
          required: true
          schema:
            type: array
            items:
              type: string
          style: pipeDelimited
          explode: false
          allowReserved: true
          example:
            - section;==;bookmark
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiUserconfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - ui_userconfig
      security:
        - BearerAuth: []
      summary: Delete an item
      description: |-
        Does not return content.

          **Examples:**
          
          Delete data by ID:

          `/api/ui_userconfig?id=4`
          
          Delete data by Key:

          `/api/ui_userconfig?key=demo~bookmark~editor~DMINV/00002`
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Key'
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/ui_userconfig/{IDs}':
    get:
      tags:
        - ui_userconfig
      security:
        - BearerAuth: []
      summary: Find data by IDs
      description: |-
        Returns one or more UiUserconfigs by IDs

          **Examples:**

          `/api/ui_userconfig/4,6`
      parameters:
        - $ref: '#/components/parameters/IDs'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiUserconfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /report:
    get:
      tags:
        - report
      security:
        - BearerAuth: []
      summary: Create and download a Nervatura Report
      description: |-
        Server-side PDF and CSV data generation

          **Examples:**
          
          Customer PDF invoice:
          
            `/api/report?reportkey=ntr_invoice_en&orientation=portrait
            &size=a4&nervatype=trans&refnumber=DMINV/00001`
          
          Customer invoice XML data:
          
            `/api/report?reportkey=ntr_invoice_en&output=xml
            nervatype=trans&refnumber=DMINV/00001`
          
          CSV data report:
          
            `/api/report?reportkey=csv_vat_en
            &filters[date_from]=2014-01-01&filters[date_to]=2022-01-01&filters[curr]=EUR`
      parameters:
        - in: query
          name: reportkey
          required: true
          schema:
            type: string
          example: ntr_invoice_en
        - in: query
          name: orientation
          schema:
            type: string
            enum:
              - p
              - portrait
              - l
              - landscape
            default: portrait
          example: portrait
        - in: query
          name: size
          schema:
            type: string
            enum:
              - a3
              - a4
              - a5
              - letter
              - legal
            default: a4
          example: a4
        - in: query
          name: output
          schema:
            type: string
            enum:
              - auto
              - xml
              - data
            default: auto
          example: auto
        - in: query
          name: nervatype
          schema:
            type: string
          example: trans
        - in: query
          name: refnumber
          schema:
            type: string
          example: DMINV/00001
        - in: query
          name: filters
          schema:
            type: object
            additionalProperties: true
          style: deepObject
          explode: false
          allowReserved: false
      responses:
        '200':
          description: A PDF Report or XML data file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                xml:
                  name: report
            application/json:
              schema:
                type: object
                properties:
                  filetype:
                    type: string
                  template:
                    type: string
                  data:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /report/list:
    get:
      tags:
        - report
      security:
        - BearerAuth: []
      summary: List all available Nervatura Report
      description: >-
        Returns all installable files from the `NT_REPORT_DIR` directory  (empty
        value: all available built-in Nervatura Reports)

          **Admin user group membership required.**

          **Example:**

          `/api/report/list`
      parameters:
        - in: query
          name: label
          schema:
            type: string
      responses:
        '200':
          description: A JSON data file
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /report/install:
    post:
      tags:
        - report
      security:
        - BearerAuth: []
      summary: Install a report to the database
      description: |-
        Returns a new report ID.

          **Admin user group membership required.**

          **Example:**

          `/api/report/install?reportkey=ntr_invoice_en`
      parameters:
        - in: query
          name: reportkey
          required: true
          schema:
            type: string
          example: ntr_invoice_en
      responses:
        '200':
          $ref: '#/components/responses/200IDs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /report/delete:
    delete:
      tags:
        - report
      security:
        - BearerAuth: []
      summary: Delete a report from the database
      description: |-
        Does not return content.

          **Admin user group membership required.**

          **Example:**

          `/api/report/delete?reportkey=ntr_invoice_en`
      parameters:
        - in: query
          name: reportkey
          required: true
          schema:
            type: string
          example: ntr_invoice_en
      responses:
        '204':
          $ref: '#/components/responses/OKDelete'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /database:
    post:
      tags:
        - service
      summary: Create a new Nervatura database
      description: '**All data will be destroyed!**'
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: alias
          description: Alias name of the database
          required: true
          schema:
            type: string
          example: demo
        - in: query
          name: demo
          description: Create a DEMO database
          schema:
            type: boolean
      responses:
        '200':
          description: A results data file
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /function:
    post:
      tags:
        - service
      security:
        - BearerAuth: []
      summary: Call a server-side function
      description: >-
        Availability of functions may vary with version and packages
        installation!

          **Examples:**
          
          ***Product price (current date, all customer, all qty):***
          
          getPriceValue*(vendorprice::Integer[0,1], product_id::Integer, posdate::Date, curr::String, qty::Float, customer_id::Integer)*
          
            `{ "key": "getPriceValue", "values": { "vendorprice": 0, "product_id": 2, "curr": EUR }}`
          
          Example result: { "price": 25.0, "discount": 0 }
          
          ***The next value from the numberdef table (customer, product, invoice etc.):***
          
          nextNumber*(numberkey::String, step::Boolean, insert_key::Boolean)*
          
            `{ "key": "nextNumber", "values": { "numberkey": "custnumber", "step": true, "insert_key": false }}`
          
          Example result: "CUS/2016/00005"
          
          ***Email sending:***
          
          sendEmail*("provider"::String,
            "email"::Object{ "from"::String, "name"::String, "recipients"::Array[{"email"::String}],
              "subject"::String, "text"::String, "html"::String,
              "attachments"::Array[{ "filename"::String, "report_id"::Integer, "reportkey"::String,
                "ref_id"::Integer, "nervatype"::String, "refnumber"::String }] })*
          
            `{ "key": "sendEmail", "values": { "provider":"smtp",
              "email": { "from": "info@nervatura.com", "recipients": [{ "email": "sample@company.com" }], 
              "subject": "Basic email", "text": "Sending a basic email" }}}`
          
          ***Email sending with attached report:***
          
            `{ "key": "sendEmail", "values": { "provider": "mailjet",
               "email": { "from": "info@nervatura.com", "name": "Nervatura",
               "recipients": [{ "email": "sample@company.com" }],
               "subject": "Demo Invoice", "text": "Email sending with attached invoice",
               "attachments" :[{ "reportkey":  "ntr_invoice_en", "nervatype": "trans", "refnumber": "DMINV/00001" }] }}}`
          
          Example result: { "Sent": [{ "Email": "sample@company.com", "MessageID": 18859125621232550 }]}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Server function name
                values:
                  type: object
                  description: The array of parameter values
                  additionalProperties: true
              required:
                - name
                - text
            example:
              key: getPriceValue
              values:
                vendorprice: 0
                product_id: 1
                curr: EUR
      responses:
        '200':
          description: A results data file
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /view:
    post:
      tags:
        - service
      security:
        - BearerAuth: []
      summary: Run raw SQL queries in safe mode
      description: >-
        Only "select" queries and functions can be executed. Changes to the data
        are not saved in the database.
          
          The array of Query object
          * **key:** Give the query a unique name
          * **text:** The SQL query as a string
          * **values:** The array of parameter values
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/View'
            example:
              - key: customers
                text: >-
                  select c.id, ct.groupvalue as custtype, c.custnumber,
                  c.custname from customer c inner join groups ct on c.custtype
                  = ct.id where c.deleted = 0 and c.custnumber <> 'HOME'
                values: []
              - key: invoices
                text: >-
                  select t.id, t.transnumber, tt.groupvalue as transtype,
                  td.groupvalue as direction, t.transdate, c.custname, t.curr,
                  items.amount from trans t inner join groups tt on t.transtype
                  = tt.id inner join groups td on t.direction = td.id inner join
                  customer c on t.customer_id = c.id inner join ( select
                  trans_id, sum(amount) amount from item where deleted = 0 group
                  by trans_id) items on t.id = items.trans_id where t.deleted =
                  0 and tt.groupvalue = 'invoice'
                values: []
      responses:
        '200':
          description: A results data file
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id:
          type: integer
          format: int64
          nullable: false
          description: >-
            Reference to customer.id, employee.id, event.id, place.id,
            product.id, project.id, tool.id, trans.id
          xml:
            attribute: true
        country:
          type: string
          maxLength: 150
          xml:
            attribute: true
        state:
          type: string
          maxLength: 150
          xml:
            attribute: true
        zipcode:
          type: string
          maxLength: 150
          xml:
            attribute: true
        city:
          type: string
          maxLength: 255
          xml:
            attribute: true
        street:
          type: string
          xml:
            attribute: true
        notes:
          type: string
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: >-
                The value is a generated constant key identifier:
                {nervatype}/{refnumber}~{rownumber}. The rownumber is the order
                of multiple {nervatype}/{refnumber} keys.
            nervatype:
              type: string
              enum:
                - customer
                - employee
                - event
                - place
                - product
                - project
                - tool
                - trans
            ref_id:
              type: string
              maxLength: 150
              description: >-
                Valid values: customer/{custnumber}, employee/{empnumber},
                event/{calnumber}, place/{planumber}, product/{partnumber},
                project/{pronumber}, tool/{serial}, trans/{transnumber}
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: address
    Barcode:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        code:
          type: string
          maxLength: 255
          uniqueItems: true
          nullable: false
          description: >-
            Each product can be connected to any number of bar codes, but the
            code must remain unique to ensure that the product is clearly
            identifiable.
          xml:
            attribute: true
        product_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to product.id
          xml:
            attribute: true
        description:
          type: string
          description: >-
            Comment related to the barcode. Informal, has no role in
            identification.
          xml:
            attribute: true
        barcodetype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'barcodetype').
          xml:
            attribute: true
        qty:
          type: number
          format: double
          nullable: false
          default: 0
          description: >-
            The actual amount of the products identified by the barcode. For
            example can be used for packaged goods, tray packaging.
          xml:
            attribute: true
        defcode:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: >-
            Boolean. If more than one bar code is assigned, this will be the
            default. Because of the uniqueness of the barcode the product is
            always clearly identifiable, but in reverse case (eg. in case the
            barcode should be printed on a document) we must assign one being
            the default for that product.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: code
            barcodetype:
              type: string
              enum:
                - CODE_128
                - CODE_39
                - EAN_13
                - EAN_8
                - QR
            product_id:
              type: string
              maxLength: 150
              description: 'Valid values: {partnumber}'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: barcode
    Contact:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id:
          type: integer
          format: int64
          nullable: false
          description: >-
            Reference to customer.id, employee.id, event.id, place.id,
            product.id, project.id, tool.id, trans.id
          xml:
            attribute: true
        firstname:
          type: string
          maxLength: 150
          xml:
            attribute: true
        surname:
          type: string
          maxLength: 150
          xml:
            attribute: true
        status:
          type: string
          maxLength: 150
          xml:
            attribute: true
        phone:
          type: string
          maxLength: 255
          xml:
            attribute: true
        fax:
          type: string
          maxLength: 255
          xml:
            attribute: true
        mobil:
          type: string
          maxLength: 255
          xml:
            attribute: true
        email:
          type: string
          maxLength: 255
          xml:
            attribute: true
        notes:
          type: string
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: >-
                The value is a generated constant key identifier:
                {nervatype}/{refnumber}~{rownumber}. The rownumber is the order
                of multiple {nervatype}/{refnumber} keys.
            nervatype:
              type: string
              enum:
                - customer
                - employee
                - event
                - place
                - product
                - project
                - tool
                - trans
            ref_id:
              type: string
              maxLength: 150
              description: >-
                Valid values: customer/{custnumber}, employee/{empnumber},
                event/{calnumber}, place/{planumber}, product/{partnumber},
                project/{pronumber}, tool/{serial}, trans/{transnumber}
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: contact
    Currency:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        curr:
          type: string
          maxLength: 3
          minLength: 3
          uniqueItems: true
          nullable: false
          description: The ISO 4217 code of the currency.
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          description: The name of the currency.
          xml:
            attribute: true
        digit:
          type: integer
          nullable: false
          default: 2
          description: >-
            The number of decimal places used for recording and rounding by the
            program.
          xml:
            attribute: true
        defrate:
          type: number
          format: double
          nullable: false
          default: 2
          description: >-
            Default Rate. You can specify an exchange rate vs. the default
            currency, which will be used by the reports.
          xml:
            attribute: true
        cround:
          type: integer
          nullable: false
          default: 0
          description: >-
            Rounding value for cash. Could be used in case the smallest banknote
            in circulation for that certain currency is not 1.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: curr
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: currency
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        custtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'custtype')
          xml:
            attribute: true
        custnumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = custnumber) data series.
          xml:
            attribute: true
        custname:
          type: string
          maxLength: 255
          nullable: false
          description: Full name of the customer
          xml:
            attribute: true
        taxnumber:
          type: string
          maxLength: 255
          xml:
            attribute: true
        account:
          type: string
          maxLength: 255
          xml:
            attribute: true
        notax:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean. Tax-free
          xml:
            attribute: true
        terms:
          type: integer
          nullable: false
          default: 0
          description: Payment per.
          xml:
            attribute: true
        creditlimit:
          type: number
          format: double
          nullable: false
          default: 0
          description: Customer's credit limit. Data is used by financial reports.
          xml:
            attribute: true
        discount:
          type: number
          format: double
          nullable: false
          default: 0
          description: >-
            If new product line is added (offer, order, invoice etc.) all
            products will receive the discount percentage specified in this
            field. If the product has a separate customer price, the value
            specified here will not be considered by the program.
          xml:
            attribute: true
        notes:
          type: string
          description: Comment
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: custnumber
            custtype:
              type: string
              enum:
                - own
                - company
                - private
                - other
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: customer
    Deffield:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        fieldname:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        subtype:
          type: integer
          format: int64
          nullable: true
          description: >-
            Reference to groups.id (where groupname in
            ('custtype','placetype','  protype','toolgroup','transtype'))
          xml:
            attribute: true
        fieldtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'fieldtype')
          xml:
            attribute: true
        description:
          type: string
          nullable: false
          xml:
            attribute: true
        valuelist:
          type: string
          nullable: true
          description: 'If fieldtype=valuelist: valid values are listed, separated by ~'
          xml:
            attribute: true
        addnew:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: >-
            Boolean. When selected, the attribute in case of adding a new
            element (eg a new customer or employee is created) will
            automatically be created with the default value according to its
            type and also will be attached to the new element.
          xml:
            attribute: true
        visible:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 1
          description: Boolean. Can appear or not (hidden value) on the entry forms
          xml:
            attribute: true
        readonly:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: >-
            Boolean. The value of the attribute can not be changed in the
            program interface
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: fieldname
            nervatype:
              type: string
              enum:
                - address
                - barcode
                - contact
                - currency
                - customer
                - employee
                - event
                - item
                - link
                - log
                - movement
                - payment
                - price
                - place
                - product
                - project
                - rate
                - tax
                - tool
                - trans
                - setting
            subtype:
              type: string
              maxLength: 150
              description: >-
                all groupvalue from GROUPS, where groupname equal custtype,
                placetype, protype, toolgroup, transtype
            fieldtype:
              type: string
              enum:
                - bool
                - date
                - time
                - float
                - integer
                - string
                - valuelist
                - notes
                - urlink
                - password
                - customer
                - tool
                - transitem
                - transmovement
                - transpayment
                - product
                - project
                - employee
                - place
      xml:
        name: deffield
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        empnumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = empnumber) data series.
          xml:
            attribute: true
        username:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: true
          description: Database login name. Should be unique on database level.
          xml:
            attribute: true
        usergroup:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'usergroup')
          xml:
            attribute: true
        startdate:
          type: string
          format: date
          nullable: true
          xml:
            attribute: true
        enddate:
          type: string
          format: date
          nullable: true
          xml:
            attribute: true
        department:
          type: integer
          format: int64
          nullable: true
          description: Reference to groups.id (only where groupname = 'department')
          xml:
            attribute: true
        registration_key:
          type: string
          nullable: true
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 1
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: empnumber
            usergroup:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal usergroup'
            department:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal department'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: employee
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        calnumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = calnumber) data series.
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id:
          type: integer
          format: int64
          nullable: false
          description: >-
            Reference to customer.id, employee.id, place.id, product.id,
            project.id, tool.id, trans.id
          xml:
            attribute: true
        uid:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        eventgroup:
          type: integer
          format: int64
          nullable: true
          description: Reference to groups.id (only where groupname = 'eventgroup')
          xml:
            attribute: true
        fromdate:
          type: string
          format: date-time
          nullable: true
          xml:
            attribute: true
        todate:
          type: string
          format: date-time
          nullable: true
          xml:
            attribute: true
        subject:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        place:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        description:
          type: string
          nullable: true
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: calnumber
            nervatype:
              type: string
              enum:
                - customer
                - employee
                - place
                - product
                - project
                - tool
                - trans
            ref_id:
              type: string
              maxLength: 150
              description: >-
                customer/{custnumber}, employee/{empnumber}, place/{planumber},
                product/{partnumber}, project/{pronumber}, tool/{serial},
                trans/{transnumber}
            eventgroup:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal eventgroup'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: event
    Fieldvalue:
      allOf:
        - $ref: '#/components/schemas/Meta'
        - type: object
          properties:
            ref_id:
              type: integer
              format: int64
              nullable: true
              description: >-
                Reference to any type.id where type = deffield.nervatype. If it
                is null then nervatype = setting.
              xml:
                attribute: true
            keys:
              type: object
              writeOnly: true
              properties:
                id:
                  type: string
                  maxLength: 150
                  description: >-
                    The value is a generated constant key identifier:
                    {refnumber}~~{fieldname}~{rownumber}. The rownumber is the
                    order of multiple {refnumber}~~{fieldname} keys.
                ref_id:
                  type: string
                  maxLength: 150
                  description: 'Valid values: {nervatype}/{refnumber}'
      xml:
        name: fieldvalue
    Groups:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        groupname:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        groupvalue:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        description:
          type: string
          nullable: true
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 1
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: groupname~groupvalue
      xml:
        name: groups
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        trans_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to trans.id
          xml:
            attribute: true
        product_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to product.id
          xml:
            attribute: true
        unit:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        qty:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        fxprice:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        netamount:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        discount:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        tax_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to tax.id
          xml:
            attribute: true
        vatamount:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        amount:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        description:
          type: string
          nullable: false
          xml:
            attribute: true
        deposit:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        ownstock:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        actionprice:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: transnumber~rownumber
            trans_id:
              type: string
              maxLength: 150
              description: transnumber
            product_id:
              type: string
              maxLength: 150
              description: partnumber
            tax_id:
              type: string
              maxLength: 150
              description: taxcode
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: item
    Link:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        nervatype_1:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id_1:
          type: integer
          format: int64
          nullable: false
          description: 'Reference to {nervatype}.id'
          xml:
            attribute: true
        nervatype_2:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id_2:
          type: integer
          format: int64
          nullable: false
          description: 'Reference to {nervatype}.id'
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: '{nervatype_1}~{refnumber_1}~~{nervatype_2}~{refnumber_2}'
            nervatype_1:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal nervatype'
            ref_id_1:
              type: string
              maxLength: 150
              description: '{nervatype_1}/{refnumber_1}'
            nervatype_2:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal nervatype'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: link
    Log:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        employee_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to employee.id
          xml:
            attribute: true
        crdate:
          type: string
          format: date-time
          nullable: false
          readOnly: true
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id:
          type: integer
          format: int64
          nullable: false
          description: 'Reference to {nervatype}.id'
          xml:
            attribute: true
        logstate:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'logstate')
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: '{empnumber}~{crdate}'
            employee_id:
              type: string
              maxLength: 150
              description: empnumber
            nervatype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal nervatype'
            ref_id:
              type: string
              maxLength: 150
              description: '{nervatype}/{refnumber}'
            logstate:
              type: string
              enum:
                - update
                - closed
                - deleted
                - print
                - login
                - logout
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: log
    Movement:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        trans_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to trans.id
          xml:
            attribute: true
        shippingdate:
          type: string
          format: date-time
          nullable: false
          xml:
            attribute: true
        movetype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'movetype')
          xml:
            attribute: true
        product_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to product.id
          xml:
            attribute: true
        tool_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to tool.id
          xml:
            attribute: true
        place_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to place.id
          xml:
            attribute: true
        qty:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        description:
          type: string
          nullable: true
          xml:
            attribute: true
        shared:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: transnumber~rownumber
            trans_id:
              type: string
              maxLength: 150
              description: transnumber
            movetype:
              type: string
              enum:
                - inventory
                - tool
                - plan
                - head
            product_id:
              type: string
              maxLength: 150
              description: partnumber
            tool_id:
              type: string
              maxLength: 150
              description: serial
            place_id:
              type: string
              maxLength: 150
              description: planumber
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: movement
    Numberdef:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        numberkey:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          xml:
            attribute: true
        prefix:
          type: string
          maxLength: 150
          nullable: true
          description: >-
            The text prefix of the identifier. It can be any length, but usage
            of special characters,  spaces in the text is not recommended.
          xml:
            attribute: true
        curvalue:
          type: integer
          nullable: false
          default: 0
          description: >-
            The current status of the counter, the next sequence number will be
            one value higher than this one. It is possible to re-set the
            counter, but the uniqueness must be ensured in all cases!
          xml:
            attribute: true
        isyear:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 1
          description: 'Boolean. If selected, the created identifier will contain the year.'
          xml:
            attribute: true
        sep:
          type: string
          maxLength: 1
          nullable: false
          default: /
          description: The separator character in the identifier.
          xml:
            attribute: true
        len:
          type: integer
          nullable: false
          default: 5
          description: >-
            The value field is arranged in such length to the right and filled
            with zeros.
          xml:
            attribute: true
        description:
          type: string
          nullable: true
          xml:
            attribute: true
        visible:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 1
          description: Boolean.
          xml:
            attribute: true
        readonly:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        orderby:
          type: integer
          nullable: false
          default: 0
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: numberkey
      xml:
        name: numberdef
    Pattern:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        description:
          type: string
          nullable: false
          maxLength: 150
          xml:
            attribute: true
        transtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'transtype')
          xml:
            attribute: true
        notes:
          type: string
          nullable: false
          xml:
            attribute: true
        defpattern:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: description
      xml:
        name: pattern
    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        trans_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to trans.id
          xml:
            attribute: true
        paiddate:
          type: string
          format: date
          nullable: false
          xml:
            attribute: true
        amount:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: transnumber~rownumber
            trans_id:
              type: string
              maxLength: 150
              description: transnumber
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: payment
    Place:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        planumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = planumber) data series.
          xml:
            attribute: true
        placetype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'placetype')
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        curr:
          type: string
          maxLength: 3
          minLength: 3
          nullable: true
          xml:
            attribute: true
        defplace:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: planumber
            placetype:
              type: string
              enum:
                - bank
                - cash
                - warehouse
                - other
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: place
    Price:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        product_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to product.id
          xml:
            attribute: true
        validfrom:
          type: string
          format: date
          nullable: false
          description: 'Start of validity, mandatory data.'
          xml:
            attribute: true
        validto:
          type: string
          format: date
          nullable: true
          description: 'End of validity, can be left empty.'
          xml:
            attribute: true
        curr:
          type: string
          maxLength: 3
          minLength: 3
          nullable: false
          xml:
            attribute: true
        qty:
          type: number
          format: double
          nullable: false
          default: 0
          description: >-
            Price ranges can also be specified, thus different price can be set
            for a smaller and bigger quantity of the same product. The quantity
            should be used as the lower threshold, ie. this should be the
            minimum quantity for the price set.
          xml:
            attribute: true
        pricevalue:
          type: number
          format: double
          nullable: false
          default: 0
          description: Price value.
          xml:
            attribute: true
        vendorprice:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: >-
            Boolean. Supplier (if marked) or customer price. By default the
            customer price.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: partnumber~validfrom~curr~qty
            product_id:
              type: string
              maxLength: 150
              description: partnumber
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: price
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        partnumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = partnumber) data series.
          xml:
            attribute: true
        protype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'protype')
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          description: The full name of the product or short description.
          xml:
            attribute: true
        unit:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        tax_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to tax.id
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        webitem:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: partnumber
            protype:
              type: string
              enum:
                - item
                - service
            tax_id:
              type: string
              maxLength: 150
              description: taxcode
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: product
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        pronumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = pronumber) data series.
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          description: The name of the project.
          xml:
            attribute: true
        customer_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to customer.id
          xml:
            attribute: true
        startdate:
          type: string
          format: date
          nullable: true
          xml:
            attribute: true
        enddate:
          type: string
          format: date
          nullable: true
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: pronumber
            customer_id:
              type: string
              maxLength: 150
              description: custnumber
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: project
    Rate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        ratetype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'ratetype')
          xml:
            attribute: true
        ratedate:
          type: string
          format: date
          nullable: true
          xml:
            attribute: true
        curr:
          type: string
          maxLength: 3
          minLength: 3
          nullable: false
          xml:
            attribute: true
        place_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to place.id
          xml:
            attribute: true
        rategroup:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'rategroup')
          xml:
            attribute: true
        ratevalue:
          type: number
          format: double
          nullable: false
          default: 0
          description: Rate or interest value
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: ratetype~ratedate~curr~planumber
            ratetype:
              type: string
              enum:
                - rate
                - buy
                - sell
                - average
            place_id:
              type: string
              maxLength: 150
              description: planumber
            rategroup:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal rategroup'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: rate
    Tax:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        taxcode:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: Unique ID.
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        rate:
          type: number
          format: double
          nullable: false
          default: 0
          description: Rate or interest value
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: taxcode
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: tax
    Tool:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        serial:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = serial) data series.
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        product_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to product.id
          xml:
            attribute: true
        toolgroup:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'toolgroup')
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        inactive:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: serial
            toolgroup:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal toolgroup'
            product_id:
              type: string
              maxLength: 150
              description: partnumber
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: tool
    Trans:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        transnumber:
          type: string
          maxLength: 150
          uniqueItems: true
          nullable: false
          description: >-
            Unique ID. If you set it to numberdef, it will be generated at the
            first data save. The format and value of the next data in row is
            taken from the numberdef (numberkey = transnumber) data series.
          xml:
            attribute: true
        transtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'transtype')
          xml:
            attribute: true
        direction:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'direction')
          xml:
            attribute: true
        ref_transnumber:
          type: string
          maxLength: 150
          nullable: true
          xml:
            attribute: true
        crdate:
          type: string
          format: date
          nullable: false
          xml:
            attribute: true
        transdate:
          type: string
          format: date
          nullable: false
          xml:
            attribute: true
        duedate:
          type: string
          format: date-time
          nullable: true
          xml:
            attribute: true
        customer_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to customer.id
          xml:
            attribute: true
        employee_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to employee.id
          xml:
            attribute: true
        department:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'department')
          xml:
            attribute: true
        project_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to project.id
          xml:
            attribute: true
        place_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to place.id
          xml:
            attribute: true
        paidtype:
          type: integer
          format: int64
          nullable: true
          description: Reference to groups.id (only where groupname = 'paidtype')
          xml:
            attribute: true
        curr:
          type: string
          maxLength: 3
          minLength: 3
          nullable: true
          xml:
            attribute: true
        notax:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        paid:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        acrate:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        notes:
          type: string
          nullable: true
          xml:
            attribute: true
        intnotes:
          type: string
          nullable: true
          xml:
            attribute: true
        fnote:
          type: string
          nullable: true
          xml:
            attribute: true
        transtate:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'transtate')
          xml:
            attribute: true
        closed:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: transnumber
            transtype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal transtype'
            direction:
              type: string
              enum:
                - in
                - out
                - transfer
            customer_id:
              type: string
              maxLength: 150
              description: custnumber
            employee_id:
              type: string
              maxLength: 150
              description: empnumber
            department:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal department'
            project_id:
              type: string
              maxLength: 150
              description: pronumber
            place_id:
              type: string
              maxLength: 150
              description: planumber
            paidtype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal paidtype'
            transtate:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal transtate'
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          readOnly: true
          xml:
            name: metadata
            wrapped: true
      xml:
        name: trans
    UiAudit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        usergroup:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'usergroup')
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        subtype:
          type: integer
          format: int64
          nullable: false
          description: >-
            Reference to groups.id (where groupname in ('transtype', 'movetype',
            'protype', 'custtype', 'placetype'))
          xml:
            attribute: true
        inputfilter:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'inputfilter')
          xml:
            attribute: true
        supervisor:
          type: integer
          enum:
            - 0
            - 1
          nullable: false
          default: 0
          description: Boolean.
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: '{usergroup}~{nervatype}~{transtype}'
            usergroup:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal usergroup'
            nervatype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal nervatype'
            subtype:
              type: string
              maxLength: 150
              description: >-
                all groupvalue from GROUPS, where groupname equal transtype,
                movetype, protype, custtype, placetype
            inputfilter:
              type: string
              enum:
                - disabled
                - readonly
                - update
                - all
      xml:
        name: ui_audit
    UiMenu:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        menukey:
          type: string
          maxLength: 150
          nullable: false
          uniqueItems: true
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        method:
          type: string
          maxLength: 150
          description: 'all groupvalue from GROUPS, where groupname equal method'
          xml:
            attribute: true
        modul:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        icon:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        funcname:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        address:
          type: string
          nullable: true
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: menukey
      xml:
        name: ui_menu
    UiMenufields:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        menu_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to ui_menu.id
          xml:
            attribute: true
        fieldname:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        fieldtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'fieldtype')
          xml:
            attribute: true
        orderby:
          type: integer
          nullable: false
          default: 0
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: '{menukey}~{fieldname}'
            menu_id:
              type: string
              maxLength: 150
              description: menukey
            fieldtype:
              type: string
              enum:
                - bool
                - date
                - integer
                - float
                - string
      xml:
        name: ui_menufields
    UiMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        secname:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        fieldname:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        lang:
          type: string
          maxLength: 2
          minLength: 2
          nullable: true
          xml:
            attribute: true
        msg:
          type: string
          nullable: false
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: '{secname}~{fieldname}~{lang}'
      xml:
        name: ui_message
    UiPrintqueue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        ref_id:
          type: integer
          format: int64
          nullable: false
          description: 'Reference to {nervatype}.id'
          xml:
            attribute: true
        qty:
          type: number
          format: double
          nullable: false
          default: 0
          xml:
            attribute: true
        employee_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to employee.id
          xml:
            attribute: true
        report_id:
          type: integer
          format: int64
          nullable: false
          description: Reference to ui_report.id
          xml:
            attribute: true
        crdate:
          type: string
          format: date-time
          nullable: false
          readOnly: true
          xml:
            attribute: true
      xml:
        name: ui_printqueue
    UiReport:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        reportkey:
          type: string
          maxLength: 150
          nullable: false
          uniqueItems: true
          xml:
            attribute: true
        nervatype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'nervatype')
          xml:
            attribute: true
        transtype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'transtype')
          xml:
            attribute: true
        direction:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'direction')
          xml:
            attribute: true
        repname:
          type: string
          maxLength: 255
          nullable: false
          xml:
            attribute: true
        description:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        label:
          type: string
          maxLength: 255
          nullable: true
          xml:
            attribute: true
        filetype:
          type: integer
          format: int64
          nullable: false
          description: Reference to groups.id (only where groupname = 'filetype')
          xml:
            attribute: true
        report:
          type: string
          nullable: true
          xml:
            attribute: true
        keys:
          type: object
          writeOnly: true
          properties:
            id:
              type: string
              maxLength: 150
              description: reportkey
            nervatype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal nervatype'
            transtype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal transtype'
            direction:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal direction'
            filetype:
              type: string
              maxLength: 150
              description: 'all groupvalue from GROUPS, where groupname equal filetype'
      xml:
        name: ui_report
    UiUserconfig:
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        employee_id:
          type: integer
          format: int64
          nullable: true
          description: Reference to employee.id
          xml:
            attribute: true
        section:
          type: string
          maxLength: 150
          nullable: true
          xml:
            attribute: true
        cfgroup:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        cfname:
          type: string
          maxLength: 150
          nullable: false
          xml:
            attribute: true
        cfvalue:
          type: string
          nullable: true
          xml:
            attribute: true
        orderby:
          type: integer
          nullable: false
          default: 0
          xml:
            attribute: true
      xml:
        name: ui_userconfig
    Meta:
      required:
        - fieldname
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          xml:
            attribute: true
        fieldname:
          maxLength: 150
          type: string
          description: Reference to deffield.fieldname.
          xml:
            attribute: true
        value:
          type: string
          xml:
            attribute: true
        notes:
          type: string
          xml:
            attribute: true
    Metadata:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Meta'
          - type: object
            properties:
              fieldtype:
                type: string
                description: Reference to deffield.fieldtype.
                xml:
                  attribute: true
        xml:
          name: field
    Metafields:
      type: object
      description: 'Format: fieldname~n: value~notes'
      additionalProperties:
        type: string
        xml:
          name: field
          attribute: true
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: object
      required:
        - code
        - message
    View:
      type: object
      properties:
        key:
          type: string
          description: Give the query a unique name
          xml:
            name: name
            attribute: true
        text:
          type: string
          description: The SQL query as a string
          xml:
            name: text
            attribute: true
        values:
          type: array
          items:
            type: string
            description: The array of parameter values
            xml:
              name: value
          xml:
            name: values
            wrapped: true
      required:
        - name
        - text
      xml:
        name: view
  parameters:
    IDs:
      in: path
      name: IDs
      required: true
      schema:
        type: array
        minLength: 1
        items:
          type: integer
          minimum: 1
      description: The object IDs
      example:
        - 2
        - 4
    ID:
      in: query
      name: id
      schema:
        type: integer
        minimum: 1
      description: The object ID
      example: 2
    Key:
      in: query
      name: key
      schema:
        type: string
      description: Use Key instead of ID
    Metadata:
      in: query
      name: metadata
      description: Returns metadata
      schema:
        type: boolean
        default: false
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  responses:
    200IDs:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              type: integer
              format: int64
    OKDelete:
      description: The resource was deleted successfully.
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    Unsupported:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
